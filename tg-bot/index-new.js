require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const { cleanupTempFiles } = require('./download-image');
const BackendApiService = require('./services/backendApiService');

// Check if running in demo mode
const DEMO_MODE = process.env.DEMO_MODE === 'true';

if (DEMO_MODE) {
  console.log('Running in DEMO MODE - using backend API with fallback support');
}

// Clean up temporary files every 24 hours
setInterval(() => {
  console.log('Cleaning up temporary image files...');
  cleanupTempFiles();
}, 86400000); // 24 hours

// Check for required environment variables
if (!process.env.TELEGRAM_TOKEN) {
  console.error('Error: Missing required environment variables. Please check your .env file.');
  console.error('Required variables: TELEGRAM_TOKEN');
  process.exit(1);
}

// Initialize Telegram bot with polling
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// Initialize the backend API service
const backendApi = new BackendApiService({
  baseURL: process.env.BACKEND_API_URL || 'http://localhost:3000/api',
  timeout: parseInt(process.env.BACKEND_API_TIMEOUT) || 30000
});

// Constants
const MAX_PROMPT_LENGTH = 1000;

// User session storage for multi-step operations
const userSessions = new Map();

// Image cache for callback operations
const userImageCache = new Map();

/**
 * Initialize or get user from backend
 */
async function initializeUser(telegramUser) {
  try {
    const userData = {
      externalId: telegramUser.id.toString(),
      externalSystem: 'telegram',
      profile: {
        username: telegramUser.username,
        firstName: telegramUser.first_name,
        lastName: telegramUser.last_name,
        language: telegramUser.language_code || 'en'
      },
      metadata: {
        source: 'telegram_bot',
        version: '2.0'
      }
    };

    const user = await backendApi.createOrGetUser(userData);
    console.log(`User initialized: ${user.id} (${user.externalId})`);
    return user;
  } catch (error) {
    console.error('Error initializing user:', error.message);
    throw error;
  }
}

/**
 * Check if backend is available
 */
async function checkBackendHealth() {
  try {
    const isAvailable = await backendApi.isAvailable();
    if (!isAvailable) {
      console.warn('Backend API is not available');
    }
    return isAvailable;
  } catch (error) {
    console.error('Backend health check failed:', error.message);
    return false;
  }
}

/**
 * Show stock setup menu
 */
async function showStockSetupMenu(chatId, userId) {
  const keyboard = {
    inline_keyboard: [
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å 123RF", callback_data: "setup_123rf" }],
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Shutterstock", callback_data: "setup_shutterstock" }],
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Adobe Stock", callback_data: "setup_adobe" }],
      [{ text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data: "setup_help" }]
    ]
  };

  const message = `üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*

–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
}

/**
 * Show image actions menu
 */
function getImageActionsKeyboard(imageId, userId, availableServices = []) {
  const keyboard = [];
  
  // Add upload buttons for each available service
  if (availableServices.includes('123rf')) {
    keyboard.push([{ text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ 123RF", callback_data: `upload_123rf_${imageId}` }]);
  }
  if (availableServices.includes('shutterstock')) {
    keyboard.push([{ text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ Shutterstock", callback_data: `upload_shutterstock_${imageId}` }]);
  }
  if (availableServices.includes('adobeStock')) {
    keyboard.push([{ text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ Adobe Stock", callback_data: `upload_adobe_${imageId}` }]);
  }
  
  // Add management buttons
  keyboard.push([{ text: "üìä –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–æ–∫", callback_data: `status_${imageId}` }]);
  keyboard.push([{ text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–∫–æ–≤", callback_data: "manage_stocks" }]);

  return { inline_keyboard: keyboard };
}

/**
 * Get available stock services for user
 */
async function getAvailableStockServices(userId) {
  try {
    const stockServices = await backendApi.getStockServices(userId);
    const available = [];
    
    if (stockServices.rf123?.enabled) available.push('123rf');
    if (stockServices.shutterstock?.enabled) available.push('shutterstock');
    if (stockServices.adobeStock?.enabled) available.push('adobeStock');
    
    return available;
  } catch (error) {
    console.error('Error getting available stock services:', error.message);
    return [];
  }
}

/**
 * Save image locally for Telegram
 */
async function saveImageLocally(imageBuffer, imageId) {
  const tempDir = path.join(__dirname, 'temp');
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
  }
  
  const fileName = `${imageId}_${Date.now()}.jpg`;
  const filePath = path.join(tempDir, fileName);
  
  fs.writeFileSync(filePath, imageBuffer);
  return filePath;
}

// Start command handler
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    // Check backend health
    const backendAvailable = await checkBackendHealth();
    if (!backendAvailable) {
      return bot.sendMessage(chatId, 
        '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }

    // Initialize user
    const user = await initializeUser(msg.from);
    
    const welcomeMessage = `üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Stock Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é DALL¬∑E 3 –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –Ω–∞ —Å—Ç–æ–∫–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏.

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ 123RF, Shutterstock, Adobe Stock
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–æ–∫

*–ö–æ–º–∞–Ω–¥—ã:*
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç–æ–∫–æ–≤
/mystocks - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
/myimages - –∏—Å—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`;

    await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });

    // Check if user has active stock services
    const hasActiveStocks = await backendApi.hasActiveStockServices(user.id);
    if (!hasActiveStocks) {
      await bot.sendMessage(chatId, 
        '‚ö†Ô∏è *–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.',
        { parse_mode: 'Markdown' }
      );
      return showStockSetupMenu(chatId, user.id);
    } else {
      await bot.sendMessage(chatId, 
        '\n‚úÖ –°—Ç–æ–∫–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!'
      );
    }
  } catch (error) {
    console.error('Error in /start command:', error.message);
    await bot.sendMessage(chatId, 
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

// Help command handler
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = `üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥)
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mystocks –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚Ä¢ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω—É–∂–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ü—Ä–æ–º—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1024x1024
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/mystocks - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞–º–∏
/myimages - –∏—Å—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`;

  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

// Settings command handler
bot.onText(/\/settings/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const user = await initializeUser(msg.from);
    
    const keyboard = {
      inline_keyboard: [
        [{ text: "üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data: "settings_generation" }],
        [{ text: "üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data: "settings_upload" }],
        [{ text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data: "settings_notifications" }],
        [{ text: "üîó –°—Ç–æ–∫–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã", callback_data: "manage_stocks" }]
      ]
    };

    await bot.sendMessage(chatId, 
      `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:`, 
      { parse_mode: 'Markdown', reply_markup: keyboard }
    );
  } catch (error) {
    console.error('Error in /settings command:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
  }
});

// My stocks command handler
bot.onText(/\/mystocks/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const user = await initializeUser(msg.from);
    const stockServices = await backendApi.getStockServices(user.id);
    
    let message = `üìä *–í–∞—à–∏ —Å—Ç–æ–∫–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã*\n\n`;
    
    // 123RF
    const rf123Status = stockServices.rf123?.enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
    message += `üî∏ **123RF**: ${rf123Status}\n`;
    
    // Shutterstock
    const shutterstockStatus = stockServices.shutterstock?.enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
    message += `üî∏ **Shutterstock**: ${shutterstockStatus}\n`;
    
    // Adobe Stock
    const adobeStatus = stockServices.adobeStock?.enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
    message += `üî∏ **Adobe Stock**: ${adobeStatus}\n\n`;
    
    const hasActiveServices = await backendApi.hasActiveStockServices(user.id);
    if (!hasActiveServices) {
      message += `‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.`;
    }

    const keyboard = {
      inline_keyboard: [
        [{ text: "üîó –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data: "manage_stocks" }],
        [{ text: "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π", callback_data: "configure_existing" }]
      ]
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in /mystocks command:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–∫–∞—Ö.');
  }
});

// My images command handler
bot.onText(/\/myimages/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const user = await initializeUser(msg.from);
    const imagesData = await backendApi.getUserImages(user.id, { limit: 10 });
    
    if (!imagesData.images || imagesData.images.length === 0) {
      return bot.sendMessage(chatId, 
        'üì∑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!'
      );
    }

    let message = `üì∑ *–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è* (${imagesData.pagination.total})\n\n`;
    
    imagesData.images.slice(0, 5).forEach((image, index) => {
      const date = new Date(image.createdAt).toLocaleDateString('ru-RU');
      const uploadsCount = image.uploads?.length || 0;
      message += `${index + 1}. ${image.prompt.substring(0, 50)}...\n`;
      message += `   üìÖ ${date} | üì§ ${uploadsCount} –∑–∞–≥—Ä—É–∑–æ–∫\n\n`;
    });

    if (imagesData.pagination.total > 5) {
      message += `... –∏ –µ—â–µ ${imagesData.pagination.total - 5} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`;
    }

    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error in /myimages command:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.');
  }
});

// Stats command handler
bot.onText(/\/stats/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const user = await initializeUser(msg.from);
    const stats = await backendApi.getUserStats(user.id);
    
    const message = `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üé® **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** ${stats.imagesGenerated || 0}
üì§ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** ${stats.imagesUploaded || 0}
üîÑ **–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** ${stats.totalRequests || 0}
üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** ${new Date(stats.lastActivity).toLocaleDateString('ru-RU')}

üí≥ **–ü–æ–¥–ø–∏—Å–∫–∞:** ${stats.subscription?.plan || 'free'}
üìà **–õ–∏–º–∏—Ç—ã:** ${stats.subscription?.usage?.imagesToday || 0}/${stats.subscription?.limits?.imagesPerDay || 10} —Å–µ–≥–æ–¥–Ω—è`;

    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error in /stats command:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

// Main message handler
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const telegramUserId = msg.from.id;
  
  // Skip command messages (they're handled by specific handlers)
  if (msg.text && msg.text.startsWith('/')) {
    return;
  }

  // Check if user is in a setup session
  const session = userSessions.get(telegramUserId);
  if (session && session.action === 'setup_stock') {
    return handleSetupStep(msg, session);
  }

  // Check if the message is text
  if (!msg.text) {
    bot.sendMessage(chatId, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    return;
  }

  // Validate prompt content
  const prompt = msg.text.trim();
  
  if (!prompt) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.');
    return;
  }

  if (prompt.length > MAX_PROMPT_LENGTH) {
    bot.sendMessage(
      chatId, 
      `–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ ${MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.`
    );
    return;
  }

  try {
    // Check backend health first
    const backendAvailable = await checkBackendHealth();
    if (!backendAvailable) {
      return bot.sendMessage(chatId, '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // Initialize user
    const user = await initializeUser(msg.from);
    
    // Check if user has active stock services BEFORE starting generation
    const hasActiveStocks = await backendApi.hasActiveStockServices(user.id);
    if (!hasActiveStocks) {
      await bot.sendMessage(chatId, 
        '‚ö†Ô∏è *–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.',
        { parse_mode: 'Markdown' }
      );
      return showStockSetupMenu(chatId, user.id);
    }

    // Only start processing if user has active stocks
    const processingMessage = await bot.sendMessage(chatId, 'üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');

    console.log('Generating image for prompt:', prompt);
    
    // Generate the image using backend API
    const imageData = await backendApi.generateImage({
      userId: user.id,
      userExternalId: user.externalId,
      prompt: prompt,
      options: {
        model: 'dall-e-3',
        size: '1024x1024',
        quality: 'standard',
        style: 'vivid'
      }
    });

    // Download image from backend
    const imageBuffer = await backendApi.downloadImage(imageData.id, user.id, 'file');
    
    // Save image locally for Telegram
    const localImagePath = await saveImageLocally(imageBuffer, imageData.id);
    
    // Get available stock services for this user
    const availableServices = await getAvailableStockServices(user.id);
    
    // Create caption
    let caption = `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n\n`;
    caption += `üìù **–ü—Ä–æ–º—Ç:** ${prompt}\n`;
    caption += `ü§ñ **–ú–æ–¥–µ–ª—å:** ${imageData.model}\n`;
    caption += `üìê **–†–∞–∑–º–µ—Ä:** ${imageData.size}`;
    
    // Create inline keyboard with upload options
    const keyboard = getImageActionsKeyboard(imageData.id, user.id, availableServices);
    
    // Store the image data in cache for callback operations
    userImageCache.set(msg.from.id, {
      imageId: imageData.id,
      localPath: localImagePath,
      prompt: prompt
    });
    
    console.log(`Stored image data in cache for user ${msg.from.id}: ${imageData.id}`);
    
    // Send the image
    await bot.sendPhoto(chatId, fs.createReadStream(localImagePath), {
      caption: caption,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

    // Delete the processing message
    await bot.deleteMessage(chatId, processingMessage.message_id);
    
  } catch (error) {
    console.error('Error generating image:', error.message);
    
    let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. ';
    
    if (error.message.includes('NO_ACTIVE_STOCK_SERVICES')) {
      // This should not happen due to frontend check, but handle it anyway
      await bot.deleteMessage(chatId, processingMessage.message_id);
      await bot.sendMessage(chatId, 
        '‚ö†Ô∏è *–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.',
        { parse_mode: 'Markdown' }
      );
      return showStockSetupMenu(chatId, user.id);
    } else if (error.message.includes('Backend health check failed')) {
      errorMessage += '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
    } else if (error.message.includes('Failed to generate image')) {
      errorMessage += '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.';
    } else {
      errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
    
    await bot.editMessageText(errorMessage, {
      chat_id: chatId,
      message_id: processingMessage.message_id
    });
  }
});

// Handle callback queries from inline keyboard buttons
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  try {
    // Initialize user
    const user = await initializeUser(callbackQuery.from);
    
    // Handle different callback data
    if (data === 'setup_123rf') {
      await handleStockSetup(chatId, userId, user.id, '123rf');
    } else if (data === 'setup_shutterstock') {
      await handleStockSetup(chatId, userId, user.id, 'shutterstock');
    } else if (data === 'setup_adobe') {
      await handleStockSetup(chatId, userId, user.id, 'adobeStock');
    } else if (data === 'setup_help') {
      await showSetupHelp(chatId);
    } else if (data === 'manage_stocks') {
      await showStockSetupMenu(chatId, user.id);
    } else if (data.startsWith('upload_')) {
      await handleImageUpload(callbackQuery, user);
    } else if (data.startsWith('status_')) {
      await handleStatusCheck(callbackQuery, user);
    }
    
    // Acknowledge the button press
    await bot.answerCallbackQuery(callbackQuery.id);
    
  } catch (error) {
    console.error('Error handling callback query:', error.message);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
});

/**
 * Handle setup step processing
 */
async function handleSetupStep(msg, session) {
  const chatId = msg.chat.id;
  const telegramUserId = msg.from.id;
  const input = msg.text.trim();
  
  // Handle cancel command
  if (input.toLowerCase() === '/cancel' || input.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
    userSessions.delete(telegramUserId);
    return bot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  }
  
  const serviceNames = {
    '123rf': '123RF',
    'shutterstock': 'Shutterstock',
    'adobeStock': 'Adobe Stock'
  };
  
  const serviceName = serviceNames[session.service];
  
  try {
    // Initialize user to get userId
    const user = await initializeUser(msg.from);
    
    switch (session.step) {
      case 'username':
        if (!input) {
          return bot.sendMessage(chatId, '‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        }
        
        session.data.username = input;
        session.step = 'password';
        
        await bot.sendMessage(chatId, 
          `‚úÖ –õ–æ–≥–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${input}\n\nüîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è ${serviceName}:`
        );
        break;
        
      case 'password':
        if (!input) {
          return bot.sendMessage(chatId, '‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        }
        
        session.data.password = input;
        
        // Different next steps based on service
        if (session.service === '123rf') {
          session.step = 'confirm';
          
          // Set default FTP settings for 123RF
          session.data.ftpHost = 'ftp.123rf.com';
          session.data.ftpPort = 21;
          session.data.remotePath = '/ai_images';
          
          // Show confirmation for 123RF with default settings
          const rf123ConfirmMessage = `üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}:

üë§ –õ–æ–≥–∏–Ω: ${session.data.username}
üîê –ü–∞—Ä–æ–ª—å: ${'*'.repeat(session.data.password.length)}
üåê FTP —Ö–æ—Å—Ç: ${session.data.ftpHost} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
üîå FTP –ø–æ—Ä—Ç: ${session.data.ftpPort} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
üìÅ –ü—É—Ç—å: ${session.data.remotePath} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–¥–∞" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã.`;
          
          await bot.sendMessage(chatId, rf123ConfirmMessage);
        } else if (session.service === 'shutterstock') {
          session.step = 'api_key';
          await bot.sendMessage(chatId, 
            `‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Shutterstock:`
          );
        } else if (session.service === 'adobeStock') {
          session.step = 'api_key';
          await bot.sendMessage(chatId, 
            `‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Adobe Stock:`
          );
        }
        break;
        
        
      case 'api_key':
        if (!input) {
          return bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        }
        
        session.data.apiKey = input;
        
        if (session.service === 'adobeStock') {
          session.step = 'api_secret';
          await bot.sendMessage(chatId, 
            `‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüîê –í–≤–µ–¥–∏—Ç–µ API —Å–µ–∫—Ä–µ—Ç Adobe Stock:`
          );
        } else {
          session.step = 'confirm';
          
          // Show confirmation for Shutterstock
          const shutterstockConfirmMessage = `üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}:*

üë§ **–õ–æ–≥–∏–Ω:** ${session.data.username}
üîê **–ü–∞—Ä–æ–ª—å:** ${'*'.repeat(session.data.password.length)}
üîë **API –∫–ª—é—á:** ${session.data.apiKey.substring(0, 8)}...

–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–¥–∞" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã.`;
          
          await bot.sendMessage(chatId, shutterstockConfirmMessage, { parse_mode: 'Markdown' });
        }
        break;
        
      case 'api_secret':
        if (!input) {
          return bot.sendMessage(chatId, '‚ùå API —Å–µ–∫—Ä–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        }
        
        session.data.apiSecret = input;
        session.step = 'confirm';
        
        // Show confirmation for Adobe Stock
        const adobeConfirmMessage = `üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}:*

üë§ **–õ–æ–≥–∏–Ω:** ${session.data.username}
üîê **–ü–∞—Ä–æ–ª—å:** ${'*'.repeat(session.data.password.length)}
üîë **API –∫–ª—é—á:** ${session.data.apiKey.substring(0, 8)}...
üîê **API —Å–µ–∫—Ä–µ—Ç:** ${session.data.apiSecret.substring(0, 8)}...

–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–¥–∞" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã.`;
        
        await bot.sendMessage(chatId, adobeConfirmMessage, { parse_mode: 'Markdown' });
        break;
        
      case 'confirm':
        const confirmation = input.toLowerCase();
        
        if (confirmation === '–¥–∞' || confirmation === 'yes' || confirmation === 'y') {
          // Save settings to backend
          await saveStockServiceSettings(chatId, telegramUserId, user.id, session);
        } else {
          userSessions.delete(telegramUserId);
          await bot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        }
        break;
        
      default:
        userSessions.delete(telegramUserId);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.');
    }
    
  } catch (error) {
    console.error('Error in setup step:', error.message);
    userSessions.delete(telegramUserId);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * Save stock service settings to backend
 */
async function saveStockServiceSettings(chatId, telegramUserId, userId, session) {
  const serviceNames = {
    '123rf': '123RF',
    'shutterstock': 'Shutterstock',
    'adobeStock': 'Adobe Stock'
  };
  
  const serviceName = serviceNames[session.service];
  
  try {
    // Show saving message
    const savingMessage = await bot.sendMessage(chatId, 
      `üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}...`
    );
    
    // Prepare settings object based on service type
    let settings = {
      enabled: true,
      credentials: {
        username: session.data.username,
        password: session.data.password
      },
      settings: {
        autoUpload: false,
        defaultKeywords: ['ai', 'generated', 'digital', 'art'],
        defaultDescription: 'AI-generated digital artwork',
        pricing: 'standard'
      }
    };
    
    // Add service-specific credentials
    if (session.service === '123rf') {
      settings.credentials.ftpHost = session.data.ftpHost;
      settings.credentials.ftpPort = session.data.ftpPort;
      settings.credentials.remotePath = session.data.remotePath;
    } else if (session.service === 'shutterstock') {
      settings.credentials.apiKey = session.data.apiKey;
    } else if (session.service === 'adobeStock') {
      settings.credentials.apiKey = session.data.apiKey;
      settings.credentials.secret = session.data.apiSecret;
    }
    
    // Save to backend
    const result = await backendApi.updateStockService(userId, session.service, settings);
    
    // Test connection
    await bot.editMessageText(
      `üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${serviceName}...`,
      { chat_id: chatId, message_id: savingMessage.message_id }
    );
    
    try {
      const testResult = await backendApi.testStockServiceConnection(userId, session.service);
      
      await bot.deleteMessage(chatId, savingMessage.message_id);
      
      if (testResult.success) {
        const successMessage = `‚úÖ *${serviceName} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*

üéâ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –Ω–∞ ${serviceName}.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!`;
        
        await bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
      } else {
        const warningMessage = `‚ö†Ô∏è *${serviceName} –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º*

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª:
${testResult.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
        
        await bot.sendMessage(chatId, warningMessage, { parse_mode: 'Markdown' });
      }
    } catch (testError) {
      await bot.deleteMessage(chatId, savingMessage.message_id);
      
      const warningMessage = `‚ö†Ô∏è *${serviceName} –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è*

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`;
      
      await bot.sendMessage(chatId, warningMessage, { parse_mode: 'Markdown' });
    }
    
    // Clear session
    userSessions.delete(telegramUserId);
    
  } catch (error) {
    console.error('Error saving stock service settings:', error.message);
    
    await bot.editMessageText(
      `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${serviceName}: ${error.message}`,
      { chat_id: chatId, message_id: savingMessage.message_id }
    );
    
    userSessions.delete(telegramUserId);
  }
}

/**
 * Handle stock service setup
 */
async function handleStockSetup(chatId, telegramUserId, userId, service) {
  const serviceNames = {
    '123rf': '123RF',
    'shutterstock': 'Shutterstock',
    'adobeStock': 'Adobe Stock'
  };
  
  const serviceName = serviceNames[service];
  
  // Store session data
  userSessions.set(telegramUserId, {
    action: 'setup_stock',
    service: service,
    step: 'username',
    data: {}
  });
  
  const message = `üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${serviceName}*

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName} –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–æ—Ç–º–µ–Ω–∞" –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è.

üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è ${serviceName}:`;
  
  await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
}

/**
 * Handle image upload to stock service
 */
async function handleImageUpload(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const telegramUserId = callbackQuery.from.id;
  
  // Parse callback data: upload_service_imageId
  const parts = data.split('_');
  const service = parts[1];
  const imageId = parts[2];
  
  // Check if we have the image data
  const imageData = userImageCache.get(telegramUserId);
  if (!imageData || imageData.imageId !== imageId) {
    return bot.sendMessage(chatId, 
      '‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
    );
  }
  
  const statusMessage = await bot.sendMessage(chatId, 
    `üì§ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ ${service.toUpperCase()}...`
  );
  
  try {
    // Upload to stock service via backend
    const uploadResult = await backendApi.uploadToStock({
      userId: user.id,
      imageId: imageId,
      service: service,
      title: `AI Generated: ${imageData.prompt.substring(0, 50)}`,
      description: `AI-generated digital artwork: ${imageData.prompt}`,
      keywords: imageData.prompt.split(' ').slice(0, 10),
      category: 'Digital Art',
      pricing: 'standard'
    });
    
    await bot.deleteMessage(chatId, statusMessage.message_id);
    
    if (uploadResult.success) {
      const successMessage = `‚úÖ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ ${service.toUpperCase()}!*\n\n`;
      await bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
    } else {
      await bot.sendMessage(chatId, 
        `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ${service.toUpperCase()}: ${uploadResult.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      );
    }
    
  } catch (error) {
    await bot.deleteMessage(chatId, statusMessage.message_id);
    console.error('Error uploading to stock:', error.message);
    await bot.sendMessage(chatId, 
      `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ${service.toUpperCase()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}

/**
 * Handle status check
 */
async function handleStatusCheck(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  // Parse callback data: status_imageId
  const imageId = data.split('_')[1];
  
  try {
    const uploadStatus = await backendApi.getUploadStatus(imageId, user.id);
    
    let message = `üìä *–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–æ–∫*\n\n`;
    
    if (!uploadStatus.uploads || uploadStatus.uploads.length === 0) {
      message += '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–æ—Å—å –Ω–∞ —Å—Ç–æ–∫–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã.';
    } else {
      uploadStatus.uploads.forEach(upload => {
        const status = upload.status === 'completed' ? '‚úÖ' : 
                      upload.status === 'failed' ? '‚ùå' : '‚è≥';
        const date = new Date(upload.uploadedAt).toLocaleDateString('ru-RU');
        message += `${status} **${upload.service.toUpperCase()}** - ${date}\n`;
      });
    }
    
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('Error checking upload status:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–æ–∫.');
  }
}

/**
 * Show setup help
 */
async function showSetupHelp(chatId) {
  const helpMessage = `‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ç–æ–∫–æ–≤*

**123RF:**
‚Ä¢ –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ FTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –û–±—ã—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç

**Shutterstock:**
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á
‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –†–∞–∑–¥–µ–ª "API Access"

**Adobe Stock:**
‚Ä¢ –ù—É–∂–µ–Ω API –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ Adobe Developer Console
‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

*–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.*`;

  await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
}

// Log when bot is started
console.log('ü§ñ Telegram Bot (Backend Integration) is running...');

// Handle errors
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('Bot is shutting down...');
  bot.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('Bot is shutting down...');
  bot.close();
  process.exit(0);
});
