require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const BackendApiService = require('./services/backendApiService');

// Check if running in demo mode
let DEMO_MODE = process.env.DEMO_MODE === 'true';
let demoModeActivatedByError = false;

if (DEMO_MODE) {
  console.log('Running in DEMO MODE - using mock images instead of OpenAI API');
} else {
  console.log('Running in NORMAL MODE - using backend API with OpenAI integration');
}

// Check for required environment variables
if (!process.env.TELEGRAM_TOKEN) {
  console.error('Error: Missing required environment variables. Please check your .env file.');
  console.error('Required variables: TELEGRAM_TOKEN');
  process.exit(1);
}

// Initialize Telegram bot with polling
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// Initialize the backend API service
const backendApi = new BackendApiService({
  baseURL: process.env.BACKEND_API_URL || 'http://localhost:3000/api',
  timeout: parseInt(process.env.BACKEND_API_TIMEOUT) || 120000 // 2 minutes
});

// Constants
const MAX_PROMPT_LENGTH = 1000;

// User session storage for multi-step operations
const userSessions = new Map();

// Image cache for callback operations
const userImageCache = new Map();

/**
 * Initialize or get user from backend
 */
async function initializeUser(telegramUser) {
  try {
    const userData = {
      externalId: telegramUser.id.toString(),
      externalSystem: 'telegram',
      profile: {
        username: telegramUser.username,
        firstName: telegramUser.first_name,
        lastName: telegramUser.last_name,
        language: telegramUser.language_code || 'en'
      },
      metadata: {
        source: 'telegram_bot',
        version: '2.0'
      }
    };

    const user = await backendApi.createOrGetUser(userData);
    console.log(`User initialized: ${user.id} (${user.externalId})`);
    return user;
  } catch (error) {
    console.error('Error initializing user:', error.message);
    throw error;
  }
}


/**
 * Show stock setup menu
 */
async function showStockSetupMenu(chatId, userId) {
  const keyboard = {
    inline_keyboard: [
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Adobe Stock", callback_data: "setup_adobeStock" }],
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Freepik", callback_data: "setup_freepik" }],
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Pixta", callback_data: "setup_pixta" }],
      [{ text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å 123RF", callback_data: "setup_123rf" }],
      [{ text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data: "setup_help" }]
    ]
  };

  const message = `üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'HTML',
    reply_markup: keyboard
  });
}

/**
 * Show setup help information
 */
async function showSetupHelp(chatId) {
  const helpMessage = `‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*

*123RF:*
‚Ä¢ –ù—É–∂–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ 123rf.com
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ FTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:*
‚Ä¢ –ú–∏–Ω–∏–º—É–º 4000x4000 –ø–∏–∫—Å–µ–ª–µ–π
‚Ä¢ –§–æ—Ä–º–∞—Ç JPEG
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –Ω–µ –º–µ–Ω–µ–µ 300 DPI
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ 123RF

*–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏
‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ SSL/TLS
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ 123RF –∏–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`;

  await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
}

/**
 * Show image actions menu
 */
function getImageActionsKeyboard(imageId, userId, availableServices = []) {
  const keyboard = [];
  
  // Add upload buttons for each available service
  if (availableServices.includes('123rf')) {
    keyboard.push([{ text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ 123RF", callback_data: `upload_123rf_${imageId}` }]);
  }
  // if (availableServices.includes('shutterstock')) {
  //   keyboard.push([{ text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ Shutterstock", callback_data: `upload_shutterstock_${imageId}` }]);
  // }
  // if (availableServices.includes('adobeStock')) {
  //   keyboard.push([{ text: "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ Adobe Stock", callback_data: `upload_adobe_${imageId}` }]);
  // }
  
  // Add management buttons
  keyboard.push([{ text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–∫–æ–≤", callback_data: "manage_stocks" }]);

  return { inline_keyboard: keyboard };
}

/**
 * Get available stock services for user
 */
async function getAvailableStockServices(userId) {
  try {
    const stockServices = await backendApi.getStockServices(userId);
    const available = [];
    
    if (stockServices.rf123?.enabled) available.push('123rf');
    // if (stockServices.shutterstock?.enabled) available.push('shutterstock');
    // if (stockServices.adobeStock?.enabled) available.push('adobeStock');
    
    return available;
  } catch (error) {
    console.error('Error getting available stock services:', error.message);
    return [];
  }
}

/**
 * Check if backend is available
 */
async function checkBackendHealth() {
  try {
    const isAvailable = await backendApi.isAvailable();
    if (!isAvailable) {
      console.warn('Backend API is not available');
    }
    return isAvailable;
  } catch (error) {
    console.error('Backend health check failed:', error.message);
    return false;
  }
}



/**
 * Activate demo mode due to API error
 */
function activateDemoMode(reason = 'API Error') {
  if (!demoModeActivatedByError) {
    console.log(`üîÑ ACTIVATING DEMO MODE: ${reason}`);
    demoModeActivatedByError = true;
    DEMO_MODE = true;
  }
}

// Start command handler
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    // Check backend health
    const backendAvailable = await checkBackendHealth();
    if (!backendAvailable) {
      return bot.sendMessage(chatId, 
        '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }

    // Initialize user
    const user = await initializeUser(msg.from);
    
    const welcomeMessage = `üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Stock Bot!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é DALL¬∑E 3 –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –Ω–∞ —Å—Ç–æ–∫–æ–≤—É—é –ø–ª–æ—â–∞–¥–∫—É 123RF.

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ 123RF
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç–æ–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

*–ö–æ–º–∞–Ω–¥—ã:*
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
/mystocks - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º`;

    await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });

    // Check if user has active stock services
    const hasActiveStocks = await backendApi.hasActiveStockServices(user.id);
    if (!hasActiveStocks) {
      await bot.sendMessage(chatId, 
        '‚ö†Ô∏è *–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.',
        { parse_mode: 'Markdown' }
      );
      return showStockSetupMenu(chatId, user.id);
    } else {
      await bot.sendMessage(chatId, 
        '\n‚úÖ –°—Ç–æ–∫–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!'
      );
    }
  } catch (error) {
    console.error('Error in /start command:', error.message);
    await bot.sendMessage(chatId, 
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

// Help command handler
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = `üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥)
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ 123RF

*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mystocks –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º 123RF
‚Ä¢ –ù—É–∂–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ 123RF
‚Ä¢ –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ü—Ä–æ–º—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 4000x4000 –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç–æ–∫–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏ 123RF

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/mystocks - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º`;

  bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});


// My stocks command handler
bot.onText(/\/mystocks/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const user = await initializeUser(msg.from);
    const stockServices = await backendApi.getStockServices(user.id);
    
    let message = `üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏*\n\n`;
    
    const keyboard = {
      inline_keyboard: []
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    const services = [
      { key: 'adobeStock', name: 'Adobe Stock', setupData: 'setup_adobeStock' },
      { key: 'freepik', name: 'Freepik', setupData: 'setup_freepik' },
      { key: 'pixta', name: 'Pixta', setupData: 'setup_pixta' },
      { key: 'rf123', name: '123RF', setupData: 'setup_123rf' }
    ];
    
    let hasAnyService = false;
    let unconnectedServices = [];
    
    services.forEach(service => {
      const isEnabled = stockServices[service.key]?.enabled;
      const status = isEnabled ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
      message += `üî∏ *${service.name}*: ${status}\n`;
      
      if (isEnabled) {
        hasAnyService = true;
      } else {
        unconnectedServices.push(service);
      }
    });
    
    message += '\n';
    
    if (hasAnyService) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
      message += `–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ç–æ–∫" –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ
      if (unconnectedServices.length > 0) {
        keyboard.inline_keyboard.push([
          { text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ç–æ–∫", callback_data: "add_stock_service" }
        ]);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      keyboard.inline_keyboard.push([
        { text: "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data: "view_stock_menu" }
      ]);
      keyboard.inline_keyboard.push([
        { text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data: "edit_stock_menu" }
      ]);
      keyboard.inline_keyboard.push([
        { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data: "delete_stock_menu" }
      ]);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      message += `‚ö†Ô∏è *–°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã*\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      services.forEach(service => {
        keyboard.inline_keyboard.push([
          { text: `üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å ${service.name}`, callback_data: service.setupData }
        ]);
      });
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in /mystocks command:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–∫–∞—Ö.');
  }
});



// Main message handler
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const telegramUserId = msg.from.id;
  
  // Skip command messages (they're handled by specific handlers)
  if (msg.text && msg.text.startsWith('/')) {
    return;
  }

  // Check if user is in a setup session
  const session = userSessions.get(telegramUserId);
  if (session && (session.action === 'setup_stock' || session.action === 'edit_stock')) {
    return handleSetupStep(msg, session);
  }

  // Check if the message is text
  if (!msg.text) {
    bot.sendMessage(chatId, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    return;
  }

  // Validate prompt content
  const prompt = msg.text.trim();
  
  if (!prompt) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.');
    return;
  }

  if (prompt.length > MAX_PROMPT_LENGTH) {
    bot.sendMessage(
      chatId, 
      `–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ ${MAX_PROMPT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.`
    );
    return;
  }

  try {
    // Check backend health first
    const backendAvailable = await checkBackendHealth();
    if (!backendAvailable) {
      return bot.sendMessage(chatId, '‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // Initialize user
    const user = await initializeUser(msg.from);
    
    // Check if user has active stock services BEFORE starting generation
    const hasActiveStocks = await backendApi.hasActiveStockServices(user.id);
    if (!hasActiveStocks) {
      await bot.sendMessage(chatId, 
        '‚ö†Ô∏è *–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.',
        { parse_mode: 'Markdown' }
      );
      return showStockSetupMenu(chatId, user.id);
    }

    // Only start processing if user has active stocks
    const processingMessage = await bot.sendMessage(chatId, 'üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');

    try {
      console.log('Generating image for prompt:', prompt);
      
      // Generate the image using backend API
      const imageData = await backendApi.generateImage({
        userId: user.id,
        userExternalId: user.externalId,
        prompt: prompt,
        demoMode: DEMO_MODE,
        options: {
          model: 'dall-e-3',
          size: '1024x1024',
          quality: 'standard',
          style: 'vivid'
        }
      });

      // Get image stream from backend for direct sending
      const imageStream = await backendApi.getImageStream(imageData.id, user.id);
      
      // Get available stock services for this user
      const availableServices = await getAvailableStockServices(user.id);
      
      // Create caption based on whether it's a fallback/demo image
      let caption;
      const isFallbackOrDemo = (
        (imageData.usedSource && (imageData.usedSource.includes('Fallback') || imageData.usedSource.includes('Demo'))) ||
        (imageData.fallbackReason && imageData.fallbackReason !== 'None') ||
        DEMO_MODE ||
        demoModeActivatedByError
      );
      
      if (isFallbackOrDemo) {
        caption = `üé® –î–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n\n`;
        caption += `‚ö†Ô∏è *–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ* (OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n\n`;
      } else {
        caption = `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n\n`;
      }
      caption += `üìù *–ü—Ä–æ–º—Ç:* ${prompt}\n`;
      caption += `ü§ñ *–ú–æ–¥–µ–ª—å:* ${imageData.model}\n`;
      caption += `üìê *–†–∞–∑–º–µ—Ä:* 4000x4000`;
      
      // Create inline keyboard with upload options
      const keyboard = getImageActionsKeyboard(imageData.id, user.id, availableServices);
      
      // Store the image data in cache for callback operations (without local path)
      userImageCache.set(msg.from.id, {
        imageId: imageData.id,
        prompt: prompt
      });
      
      console.log(`Stored image data in cache for user ${msg.from.id}: ${imageData.id}`);
      
      // Send the image using stream directly from backend
      await bot.sendPhoto(chatId, imageStream, {
        caption: caption,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

      // Delete the processing message
      await bot.deleteMessage(chatId, processingMessage.message_id);
      
    } catch (error) {
      console.error('Error generating image:', error.message);
      
      let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. ';
      
      if (error.message.includes('NO_ACTIVE_STOCK_SERVICES')) {
        // This should not happen due to frontend check, but handle it anyway
        await bot.deleteMessage(chatId, processingMessage.message_id);
        await bot.sendMessage(chatId, 
          '‚ö†Ô∏è *–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.',
          { parse_mode: 'Markdown' }
        );
        return showStockSetupMenu(chatId, user.id);
      } else if (error.message.includes('Backend health check failed')) {
        errorMessage += '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
      } else if (error.message.includes('Failed to generate image')) {
        errorMessage += '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.';
      } else {
        errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      }
      
      await bot.editMessageText(errorMessage, {
        chat_id: chatId,
        message_id: processingMessage.message_id
      });
    }
  } catch (error) {
    console.error('Error in main message handler:', error.message);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle callback queries from inline keyboard buttons
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  // Try to acknowledge the callback query immediately to prevent timeout
  try {
    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (ackError) {
    // If acknowledgment fails (e.g., query too old), log it but continue processing
    console.error('Failed to acknowledge callback query:', ackError.message);
    
    // If the query is too old, send a new message instead of trying to process it
    if (ackError.message.includes('query is too old')) {
      return bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /mystocks.'
      );
    }
  }
  
  try {
    // Initialize user
    const user = await initializeUser(callbackQuery.from);
    
    // Handle different callback data
    if (data === 'setup_123rf') {
      await handleStockSetup(chatId, userId, user.id, '123rf');
    } else if (data === 'setup_adobeStock') {
      await handleStockSetup(chatId, userId, user.id, 'adobeStock');
    } else if (data === 'setup_freepik') {
      await handleStockSetup(chatId, userId, user.id, 'freepik');
    } else if (data === 'setup_pixta') {
      await handleStockSetup(chatId, userId, user.id, 'pixta');
    } else if (data === 'setup_help') {
      await showSetupHelp(chatId);
    } else if (data === 'manage_stocks') {
      await showStockSetupMenu(chatId, user.id);
    } else if (data === 'configure_existing') {
      await showConfigureExistingMenu(chatId, user.id);
    } else if (data === 'view_stock_menu') {
      await handleViewStockMenu(callbackQuery, user);
    } else if (data.startsWith('view_') && data !== 'view_stock_menu') {
      await handleViewStock(callbackQuery, user);
    } else if (data === 'edit_stock_menu') {
      await handleEditStockMenu(callbackQuery, user);
    } else if (data.startsWith('edit_') && data !== 'edit_stock_menu') {
      await handleEditStock(callbackQuery, user);
    } else if (data === 'delete_stock_menu') {
      await handleDeleteStockMenu(callbackQuery, user);
    } else if (data.startsWith('delete_') && data !== 'delete_stock_menu') {
      await handleDeleteStock(callbackQuery, user);
    } else if (data.startsWith('confirm_delete_')) {
      await handleConfirmDelete(callbackQuery, user);
    } else if (data === 'cancel_delete') {
      await bot.sendMessage(chatId, '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    } else if (data.startsWith('confirm_save_')) {
      await handleConfirmSave(callbackQuery, user);
    } else if (data.startsWith('confirm_cancel_')) {
      await handleConfirmCancel(callbackQuery, user);
    } else if (data.startsWith('confirm_edit_')) {
      await handleConfirmEdit(callbackQuery, user);
    } else if (data.startsWith('skip_username_')) {
      await handleSkipUsername(callbackQuery, user);
    } else if (data.startsWith('skip_password_')) {
      await handleSkipPassword(callbackQuery, user);
    } else if (data.startsWith('cancel_setup_')) {
      await handleCancelSetup(callbackQuery, user);
    } else if (data.startsWith('upload_')) {
      await handleImageUpload(callbackQuery, user);
    } else if (data === 'add_stock_service') {
      await handleAddStockService(callbackQuery, user);
    } else if (data === 'view_stock_menu') {
      await handleViewStockMenu(callbackQuery, user);
    } else if (data === 'edit_stock_menu') {
      await handleEditStockMenu(callbackQuery, user);
    } else if (data === 'delete_stock_menu') {
      await handleDeleteStockMenu(callbackQuery, user);
    }
    
  } catch (error) {
    console.error('Error handling callback query:', error.message);
    
    // Send error message to user
    try {
      await bot.sendMessage(chatId, 
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /mystocks.'
      );
    } catch (sendError) {
      console.error('Failed to send error message:', sendError.message);
    }
  }
});

/**
 * Handle setup step processing
 */
async function handleSetupStep(msg, session) {
  const chatId = msg.chat.id;
  const telegramUserId = msg.from.id;
  const input = msg.text.trim();
  
  // Handle cancel command
  if (input.toLowerCase() === '/cancel' || input.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
    userSessions.delete(telegramUserId);
    return bot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  }
  
  const serviceNames = {
    '123rf': '123RF'
    // 'shutterstock': 'Shutterstock',
    // 'adobeStock': 'Adobe Stock'
  };
  
  const serviceName = serviceNames[session.service];
  
  try {
    // Initialize user to get userId
    const user = await initializeUser(msg.from);
    
    switch (session.step) {
      case 'username':
        // Handle editing mode
        if (session.action === 'edit_stock') {
          if (input.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || input.toLowerCase() === 'skip') {
            // Keep current username
            session.data.username = session.data.currentData.username;
          } else if (!input) {
            return bot.sendMessage(chatId, '‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":');
          } else {
            session.data.username = input;
          }
          
          session.step = 'password';
          await bot.sendMessage(chatId, 
            `‚úÖ –õ–æ–≥–∏–Ω: ${session.data.username}\n\nüîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${serviceName} –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:`
          );
        } else {
          // Handle setup mode
          if (!input) {
            return bot.sendMessage(chatId, '‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
          }
          
          session.data.username = input;
          session.step = 'password';
          
          const message = `‚úÖ –õ–æ–≥–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${input}\n\nüîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è ${serviceName}:`;
          
          const keyboard = {
            inline_keyboard: [
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: `cancel_setup_${telegramUserId}` }]
            ]
          };
          
          await bot.sendMessage(chatId, message, {
            reply_markup: keyboard
          });
        }
        break;
        
      case 'password':
        // Handle editing mode
        if (session.action === 'edit_stock') {
          if (input.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || input.toLowerCase() === 'skip') {
            // Keep current password
            session.data.password = session.data.currentData.password || '';
          } else if (!input) {
            return bot.sendMessage(chatId, '‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":');
          } else {
            session.data.password = input;
          }
        } else {
          // Handle setup mode
          if (!input) {
            return bot.sendMessage(chatId, '‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
          }
          session.data.password = input;
        }
        
        // Different next steps based on service
        if (session.service === '123rf') {
          session.step = 'confirm';
          
          // Set default FTP settings for 123RF
          session.data.ftpHost = 'ftp.123rf.com';
          session.data.ftpPort = 21;
          session.data.remotePath = '/ai_image';
          
          // Show confirmation for 123RF with inline buttons
          const passwordLength = (session.data.password || '').length;
          const rf123ConfirmMessage = `üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}:

üë§ –õ–æ–≥–∏–Ω: ${session.data.username}
üîê –ü–∞—Ä–æ–ª—å: ${'*'.repeat(passwordLength)}
üåê FTP —Ö–æ—Å—Ç: ${session.data.ftpHost} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
üîå FTP –ø–æ—Ä—Ç: ${session.data.ftpPort} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
üìÅ –ü—É—Ç—å: ${session.data.remotePath} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

–í—Å–µ –≤–µ—Ä–Ω–æ?`;

          const confirmKeyboard = {
            inline_keyboard: [
              [
                { text: "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: `confirm_save_${telegramUserId}` },
                { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: `confirm_cancel_${telegramUserId}` }
              ],
              [
                { text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data: `confirm_edit_${telegramUserId}` }
              ]
            ]
          };
          
          await bot.sendMessage(chatId, rf123ConfirmMessage, {
            reply_markup: confirmKeyboard
          });
        } else if (session.service === 'shutterstock') {
          session.step = 'api_key';
          await bot.sendMessage(chatId, 
            `‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Shutterstock:`
          );
        } else if (session.service === 'adobeStock') {
          session.step = 'api_key';
          await bot.sendMessage(chatId, 
            `‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Adobe Stock:`
          );
        }
        break;
        
        
      case 'api_key':
        if (!input) {
          return bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        }
        
        session.data.apiKey = input;
        
        if (session.service === 'adobeStock') {
          session.step = 'api_secret';
          await bot.sendMessage(chatId, 
            `‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüîê –í–≤–µ–¥–∏—Ç–µ API —Å–µ–∫—Ä–µ—Ç Adobe Stock:`
          );
        } else {
          session.step = 'confirm';
          
          // Show confirmation for Shutterstock
          const shutterstockConfirmMessage = `üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}:</b>

üë§ <b>–õ–æ–≥–∏–Ω:</b> ${session.data.username}
üîê <b>–ü–∞—Ä–æ–ª—å:</b> ${'*'.repeat(session.data.password.length)}
üîë <b>API –∫–ª—é—á:</b> ${session.data.apiKey.substring(0, 8)}...

–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–¥–∞" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã.`;
          
          await bot.sendMessage(chatId, shutterstockConfirmMessage, { parse_mode: 'HTML' });
        }
        break;
        
      case 'api_secret':
        if (!input) {
          return bot.sendMessage(chatId, '‚ùå API —Å–µ–∫—Ä–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        }
        
        session.data.apiSecret = input;
        session.step = 'confirm';
        
        // Show confirmation for Adobe Stock
        const adobeConfirmMessage = `üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}:</b>

üë§ <b>–õ–æ–≥–∏–Ω:</b> ${session.data.username}
üîê <b>–ü–∞—Ä–æ–ª—å:</b> ${'*'.repeat(session.data.password.length)}
üîë <b>API –∫–ª—é—á:</b> ${session.data.apiKey.substring(0, 8)}...
üîê <b>API —Å–µ–∫—Ä–µ—Ç:</b> ${session.data.apiSecret.substring(0, 8)}...

–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ "–¥–∞" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ "–Ω–µ—Ç" –¥–ª—è –æ—Ç–º–µ–Ω—ã.`;
        
        await bot.sendMessage(chatId, adobeConfirmMessage, { parse_mode: 'HTML' });
        break;
        
      case 'confirm':
        // This case should not be reached anymore as we use inline buttons
        // But keep it for backward compatibility
        const confirmation = input.toLowerCase();
        
        if (confirmation === '–¥–∞' || confirmation === 'yes' || confirmation === 'y') {
          // Save settings to backend
          await saveStockServiceSettings(chatId, telegramUserId, user.id, session);
        } else {
          userSessions.delete(telegramUserId);
          await bot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        }
        break;
        
      default:
        userSessions.delete(telegramUserId);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.');
    }
    
  } catch (error) {
    console.error('Error in setup step:', error.message);
    userSessions.delete(telegramUserId);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * Save stock service settings to backend
 */
async function saveStockServiceSettings(chatId, telegramUserId, userId, session) {
  const serviceNames = {
    '123rf': '123RF'
    // 'shutterstock': 'Shutterstock',
    // 'adobeStock': 'Adobe Stock'
  };
  
  const serviceName = serviceNames[session.service];
  
  try {
    // Show saving message
    const savingMessage = await bot.sendMessage(chatId, 
      `üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}...`
    );
    
    // Prepare settings object based on service type
    let settings = {
      enabled: true,
      credentials: {
        username: session.data.username,
        password: session.data.password
      },
      settings: {
        autoUpload: false,
        defaultKeywords: ['ai', 'generated', 'digital', 'art'],
        defaultDescription: 'AI-generated digital artwork',
        pricing: 'standard'
      }
    };
    
    // Add service-specific credentials
    if (session.service === '123rf') {
      settings.credentials.ftpHost = session.data.ftpHost;
      settings.credentials.ftpPort = session.data.ftpPort;
      settings.credentials.remotePath = session.data.remotePath;
    } else if (session.service === 'shutterstock') {
      settings.credentials.apiKey = session.data.apiKey;
    } else if (session.service === 'adobeStock') {
      settings.credentials.apiKey = session.data.apiKey;
      settings.credentials.secret = session.data.apiSecret;
    }
    
    // Save to backend
    const result = await backendApi.updateStockService(userId, session.service, settings);
    
    // Test connection
    await bot.editMessageText(
      `üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${serviceName}...`,
      { chat_id: chatId, message_id: savingMessage.message_id }
    );
    
    try {
      const testResult = await backendApi.testStockServiceConnection(userId, session.service);
      
      await bot.deleteMessage(chatId, savingMessage.message_id);
      
      if (testResult.success) {
        let successMessage;
        if (session.action === 'edit_stock') {
          successMessage = `‚úÖ *–î–∞–Ω–Ω—ã–µ ${serviceName} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*

üéâ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.
–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`;
        } else {
          successMessage = `‚úÖ *${serviceName} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*

üéâ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –Ω–∞ ${serviceName}.

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!`;
        }
        
        await bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
      } else {
        let warningMessage;
        if (session.action === 'edit_stock') {
          warningMessage = `‚ö†Ô∏è *–î–∞–Ω–Ω—ã–µ ${serviceName} –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º*

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª:
${testResult.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
        } else {
          warningMessage = `‚ö†Ô∏è *${serviceName} –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º*

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª:
${testResult.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
        }
        
        await bot.sendMessage(chatId, warningMessage, { parse_mode: 'Markdown' });
      }
    } catch (testError) {
      await bot.deleteMessage(chatId, savingMessage.message_id);
      
      let warningMessage;
      if (session.action === 'edit_stock') {
        warningMessage = `‚ö†Ô∏è *–î–∞–Ω–Ω—ã–µ ${serviceName} –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è*

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`;
      } else {
        warningMessage = `‚ö†Ô∏è *${serviceName} –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª—Å—è*

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`;
      }
      
      await bot.sendMessage(chatId, warningMessage, { parse_mode: 'Markdown' });
    }
    
    // Clear session
    userSessions.delete(telegramUserId);
    
  } catch (error) {
    console.error('Error saving stock service settings:', error.message);
    
    await bot.editMessageText(
      `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ${serviceName}: ${error.message}`,
      { chat_id: chatId, message_id: savingMessage.message_id }
    );
    
    userSessions.delete(telegramUserId);
  }
}

/**
 * Handle stock service setup
 */
async function handleStockSetup(chatId, telegramUserId, userId, service) {
  const serviceNames = {
    '123rf': '123RF'
    // 'shutterstock': 'Shutterstock',
    // 'adobeStock': 'Adobe Stock'
  };
  
  const serviceName = serviceNames[service];
  
  // Store session data
  userSessions.set(telegramUserId, {
    action: 'setup_stock',
    service: service,
    step: 'username',
    data: {}
  });
  
  const message = `üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${serviceName}*

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName} –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è ${serviceName}:`;

  const keyboard = {
    inline_keyboard: [
      [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: `cancel_setup_${telegramUserId}` }]
    ]
  };
  
  await bot.sendMessage(chatId, message, { 
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
}

/**
 * Handle image upload to stock service
 */
async function handleImageUpload(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const telegramUserId = callbackQuery.from.id;
  
  // Parse callback data: upload_service_imageId
  const parts = data.split('_');
  const service = parts[1];
  const imageId = parts[2];
  
  // Check if we have the image data
  const imageData = userImageCache.get(telegramUserId);
  if (!imageData || imageData.imageId !== imageId) {
    return bot.sendMessage(chatId, 
      '‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
    );
  }
  
  const statusMessage = await bot.sendMessage(chatId, 
    `üì§ –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ ${service.toUpperCase()}...`
  );
  
  try {
    // Upload to stock service via backend
    const uploadResult = await backendApi.uploadToStock({
      userId: user.id,
      imageId: imageId,
      service: service,
      title: `AI Generated: ${imageData.prompt.substring(0, 50)}`,
      description: `AI-generated digital artwork: ${imageData.prompt}`,
      keywords: imageData.prompt.split(' ').slice(0, 10),
      category: 'Digital Art',
      pricing: 'standard'
    });
    
    await bot.deleteMessage(chatId, statusMessage.message_id);
    
    if (uploadResult.success) {
      let successMessage;
      if (service === '123rf') {
        successMessage = `‚úÖ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ 123RF!*

–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ [—Å—Å—ã–ª–∫–µ](https://www.123rf.com/contributor/upload-content?category=ai-images) –∏ –Ω–∞–∂–º–∏—Ç–µ "Upload via FTP", –∞ –∑–∞—Ç–µ–º "Proceed".

–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ Manage content –≤–æ –≤–∫–ª–∞–¥–∫–µ "Draft". –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ–≥–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.`;
      } else {
        successMessage = `‚úÖ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ ${service.toUpperCase()}!*\n\n`;
      }
      await bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
    } else {
      await bot.sendMessage(chatId, 
        `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ${service.toUpperCase()}: ${uploadResult.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      );
    }
    
  } catch (error) {
    await bot.deleteMessage(chatId, statusMessage.message_id);
    console.error('Error uploading to stock:', error.message);
    await bot.sendMessage(chatId, 
      `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ ${service.toUpperCase()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}


/**
 * Show configure existing menu
 */
async function showConfigureExistingMenu(chatId, userId) {
  try {
    const stockServices = await backendApi.getStockServices(userId);
    
    const keyboard = {
      inline_keyboard: []
    };
    
    let message = `üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n`;
    
    // Add edit buttons for active services
    if (stockServices.rf123?.enabled) {
      message += `‚úÖ *123RF* - –∞–∫—Ç–∏–≤–µ–Ω\n`;
      keyboard.inline_keyboard.push([{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å 123RF", callback_data: "edit_rf123" }]);
    }
    
    // if (stockServices.shutterstock?.enabled) {
    //   message += `‚úÖ **Shutterstock** - –∞–∫—Ç–∏–≤–µ–Ω\n`;
    //   keyboard.inline_keyboard.push([{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å Shutterstock", callback_data: "edit_shutterstock" }]);
    // }
    
    // if (stockServices.adobeStock?.enabled) {
    //   message += `‚úÖ **Adobe Stock** - –∞–∫—Ç–∏–≤–µ–Ω\n`;
    //   keyboard.inline_keyboard.push([{ text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å Adobe Stock", callback_data: "edit_adobeStock" }]);
    // }
    
    if (keyboard.inline_keyboard.length === 0) {
      message = `‚ùå *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.`;
      keyboard.inline_keyboard.push([{ text: "üîó –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data: "manage_stocks" }]);
    }
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error showing configure existing menu:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤.');
  }
}

/**
 * Handle view stock details
 */
async function handleViewStock(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  console.log('handleViewStock called with data:', data);
  
  // Handle both old format (view_rf123) and new format (view_adobeStock, view_freepik, etc.)
  let service;
  if (data.startsWith('view_')) {
    const parts = data.split('_');
    service = parts[1]; // view_rf123 -> rf123 or view_adobeStock -> adobeStock
  }
  
  console.log('Extracted service:', service);
  
  try {
    const stockServices = await backendApi.getStockServices(user.id);
    console.log('Available stock services:', Object.keys(stockServices));
    
    const serviceData = stockServices[service];
    console.log('Service data for', service, ':', serviceData ? 'found' : 'not found');
    
    if (!serviceData || !serviceData.enabled) {
      console.log('Service not found or not enabled:', service);
      return bot.sendMessage(chatId, `‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. (service: ${service})`);
    }
    
    const serviceNames = {
      'rf123': '123RF',
      'shutterstock': 'Shutterstock',
      'adobeStock': 'Adobe Stock',
      'freepik': 'Freepik',
      'pixta': 'Pixta'
    };
    
    const serviceName = serviceNames[service];
    
    let message = `üëÅÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ${serviceName}</b>\n\n`;
    message += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n`;
    message += `üë§ <b>–õ–æ–≥–∏–Ω:</b> ${serviceData.credentials.username}\n`;
    message += `üîê <b>–ü–∞—Ä–æ–ª—å:</b> ${'*'.repeat((serviceData.credentials.password || '').length)}\n`;
    
    if (service === 'rf123') {
      message += `üåê <b>FTP —Ö–æ—Å—Ç:</b> ${serviceData.credentials.ftpHost}\n`;
      message += `üîå <b>FTP –ø–æ—Ä—Ç:</b> ${serviceData.credentials.ftpPort}\n`;
      message += `üìÅ <b>–ü—É—Ç—å:</b> ${serviceData.credentials.remotePath}\n`;
    } else if (service === 'shutterstock') {
      message += `üîë <b>API –∫–ª—é—á:</b> ${serviceData.credentials.apiKey.substring(0, 8)}...\n`;
    } else if (service === 'adobeStock') {
      message += `üîë <b>API –∫–ª—é—á:</b> ${serviceData.credentials.apiKey.substring(0, 8)}...\n`;
      message += `üîê <b>API —Å–µ–∫—Ä–µ—Ç:</b> ${serviceData.credentials.secret.substring(0, 8)}...\n`;
    }
    
    
    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error viewing stock details:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ.');
  }
}

/**
 * Handle delete stock service
 */
async function handleDeleteStock(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  
  console.log('handleDeleteStock called with data:', data);
  
  // Handle both old format (delete_rf123) and new format (delete_adobeStock, delete_freepik, etc.)
  let service;
  if (data.startsWith('delete_')) {
    const parts = data.split('_');
    service = parts[1]; // delete_rf123 -> rf123 or delete_adobeStock -> adobeStock
  }
  
  console.log('Extracted service for delete:', service);
  
  const serviceNames = {
    'rf123': '123RF',
    'shutterstock': 'Shutterstock',
    'adobeStock': 'Adobe Stock',
    'freepik': 'Freepik',
    'pixta': 'Pixta'
  };
  
  const serviceName = serviceNames[service];
  console.log('Service name for delete:', serviceName);
  
  try {
    // Show confirmation dialog
    const keyboard = {
      inline_keyboard: [
        [
          { text: "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data: `confirm_delete_${service}` },
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_delete" }
        ]
      ]
    };
    
    const message = `‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ${serviceName}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`;
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    
  } catch (error) {
    console.error('Error handling delete stock:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.');
  }
}

/**
 * Handle edit stock service
 */
async function handleEditStock(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const telegramUserId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  // Handle both old format (edit_rf123) and new format (edit_adobeStock, edit_freepik, etc.)
  let service;
  if (data.startsWith('edit_')) {
    const parts = data.split('_');
    service = parts[1]; // edit_rf123 -> rf123 or edit_adobeStock -> adobeStock
  }
  
  const serviceNames = {
    'rf123': '123RF',
    'shutterstock': 'Shutterstock',
    'adobeStock': 'Adobe Stock',
    'freepik': 'Freepik',
    'pixta': 'Pixta'
  };
  
  // Map internal service names to external API names for session
  const serviceApiMapping = {
    'rf123': '123rf',
    'shutterstock': 'shutterstock',
    'adobeStock': 'adobeStock',
    'freepik': 'freepik',
    'pixta': 'pixta'
  };
  
  const serviceName = serviceNames[service];
  const apiServiceName = serviceApiMapping[service];
  
  try {
    // Get current service data
    const stockServices = await backendApi.getStockServices(user.id);
    const serviceData = stockServices[service];
    
    if (!serviceData || !serviceData.enabled) {
      return bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.');
    }
    
    // Store session data for editing - use API service name for backend calls
    userSessions.set(telegramUserId, {
      action: 'edit_stock',
      service: apiServiceName, // Use API service name for backend calls
      step: 'username',
      data: {
        currentData: serviceData.credentials
      }
    });
    
    const message = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${serviceName}*\n\n–¢–µ–∫—É—â–∏–π –ª–æ–≥–∏–Ω: ${serviceData.credentials.username}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:`;
    
    const keyboard = {
      inline_keyboard: [
        [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: `skip_username_${telegramUserId}` }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: `cancel_setup_${telegramUserId}` }]
      ]
    };
    
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    
  } catch (error) {
    console.error('Error handling edit stock:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.');
  }
}

/**
 * Handle confirm delete stock service
 */
async function handleConfirmDelete(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const service = callbackQuery.data.split('_')[2]; // confirm_delete_rf123 -> rf123
  
  // Map internal service names to external API names
  const serviceApiMapping = {
    'rf123': '123rf',
    'shutterstock': 'shutterstock',
    'adobeStock': 'adobeStock',
    'freepik': 'freepik',
    'pixta': 'pixta'
  };
  
  const serviceNames = {
    'rf123': '123RF',
    'shutterstock': 'Shutterstock',
    'adobeStock': 'Adobe Stock',
    'freepik': 'Freepik',
    'pixta': 'Pixta'
  };
  
  const serviceName = serviceNames[service];
  const apiServiceName = serviceApiMapping[service];
  
  try {
    const deletingMessage = await bot.sendMessage(chatId, 
      `üóëÔ∏è –£–¥–∞–ª—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}...`
    );
    
    // Delete the stock service via backend API using correct service name
    await backendApi.deleteStockService(user.id, apiServiceName);
    
    await bot.deleteMessage(chatId, deletingMessage.message_id);
    
    const successMessage = `‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã*\n\n–°–µ—Ä–≤–∏—Å –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.`;
    
    await bot.sendMessage(chatId, successMessage, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('Error deleting stock service:', error.message);
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${serviceName}: ${error.message}`);
  }
}

/**
 * Handle confirm save button
 */
async function handleConfirmSave(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const telegramUserId = callbackQuery.from.id;
  
  // Get session data
  const session = userSessions.get(telegramUserId);
  if (!session) {
    return bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.');
  }
  
  // Save settings to backend
  await saveStockServiceSettings(chatId, telegramUserId, user.id, session);
}

/**
 * Handle confirm cancel button
 */
async function handleConfirmCancel(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const telegramUserId = callbackQuery.from.id;
  
  // Clear session
  userSessions.delete(telegramUserId);
  
  // Return to /mystocks menu instead of just showing cancellation message
  try {
    const stockServices = await backendApi.getStockServices(user.id);
    
    let message = `üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏*\n\n`;
    
    const keyboard = {
      inline_keyboard: []
    };
    
    // 123RF
    const rf123Status = stockServices.rf123?.enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
    message += `üî∏ *123RF*: ${rf123Status}\n\n`;
    
    if (stockServices.rf123?.enabled) {
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–≤—è–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      message += `–°–µ—Ä–≤–∏—Å 123RF –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.`;
      keyboard.inline_keyboard.push([
        { text: "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å 123RF", callback_data: "view_rf123" }
      ]);
      keyboard.inline_keyboard.push([
        { text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ 123RF", callback_data: "edit_rf123" }
      ]);
      keyboard.inline_keyboard.push([
        { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å 123RF", callback_data: "delete_rf123" }
      ]);
    } else {
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑–∫–∏
      message += `‚ö†Ô∏è *–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å 123RF.`;
      keyboard.inline_keyboard.push([
        { text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å 123RF", callback_data: "setup_123rf" }
      ]);
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in handleConfirmCancel:', error.message);
    await bot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  }
}

/**
 * Handle confirm edit button
 */
async function handleConfirmEdit(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const telegramUserId = callbackQuery.from.id;
  
  // Get session data
  const session = userSessions.get(telegramUserId);
  if (!session) {
    return bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.');
  }
  
  // Reset to username step for editing
  session.step = 'username';
  session.action = 'edit_stock'; // Set action to edit mode
  
  const serviceNames = {
    '123rf': '123RF',
    'shutterstock': 'Shutterstock',
    'adobeStock': 'Adobe Stock'
  };
  
  const serviceName = serviceNames[session.service];
  
  // Get current data for editing context
  try {
    const stockServices = await backendApi.getStockServices(user.id);
    const serviceData = stockServices[session.service === '123rf' ? 'rf123' : session.service];
    
    if (serviceData && serviceData.credentials) {
      session.data.currentData = serviceData.credentials;
    }
    
    const message = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${serviceName}*\n\n–¢–µ–∫—É—â–∏–π –ª–æ–≥–∏–Ω: ${serviceData?.credentials?.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:`;
    
    const keyboard = {
      inline_keyboard: [
        [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: `skip_username_${telegramUserId}` }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: `cancel_setup_${telegramUserId}` }]
      ]
    };
    
    await bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in handleConfirmEdit:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
  }
}

/**
 * Handle skip username button
 */
async function handleSkipUsername(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const telegramUserId = callbackQuery.from.id;
  
  // Get session data
  const session = userSessions.get(telegramUserId);
  if (!session) {
    return bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.');
  }
  
  // Keep current username
  session.data.username = session.data.currentData?.username || '';
  session.step = 'password';
  
  const serviceNames = {
    '123rf': '123RF',
    'shutterstock': 'Shutterstock',
    'adobeStock': 'Adobe Stock'
  };
  
  const serviceName = serviceNames[session.service];
  
  const message = `‚úÖ –õ–æ–≥–∏–Ω: ${session.data.username}\n\nüîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${serviceName} –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π:`;
  
  const keyboard = {
    inline_keyboard: [
      [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: `skip_password_${telegramUserId}` }],
      [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: `cancel_setup_${telegramUserId}` }]
    ]
  };
  
  await bot.sendMessage(chatId, message, {
    reply_markup: keyboard
  });
}

/**
 * Handle skip password button
 */
async function handleSkipPassword(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const telegramUserId = callbackQuery.from.id;
  
  // Get session data
  const session = userSessions.get(telegramUserId);
  if (!session) {
    return bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.');
  }
  
  // Keep current password
  session.data.password = session.data.currentData?.password || '';
  
  // Continue with confirmation step for 123RF
  if (session.service === '123rf') {
    session.step = 'confirm';
    
    // Set default FTP settings for 123RF
    session.data.ftpHost = 'ftp.123rf.com';
    session.data.ftpPort = 21;
    session.data.remotePath = '/ai_image';
    
    const serviceNames = {
      '123rf': '123RF',
      'shutterstock': 'Shutterstock',
      'adobeStock': 'Adobe Stock'
    };
    
    const serviceName = serviceNames[session.service];
    
    // Show confirmation for 123RF with inline buttons
    const passwordLength = (session.data.password || '').length;
    const rf123ConfirmMessage = `üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${serviceName}:

üë§ –õ–æ–≥–∏–Ω: ${session.data.username}
üîê –ü–∞—Ä–æ–ª—å: ${'*'.repeat(passwordLength)}
üåê FTP —Ö–æ—Å—Ç: ${session.data.ftpHost} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
üîå FTP –ø–æ—Ä—Ç: ${session.data.ftpPort} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
üìÅ –ü—É—Ç—å: ${session.data.remotePath} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

–í—Å–µ –≤–µ—Ä–Ω–æ?`;

    const confirmKeyboard = {
      inline_keyboard: [
        [
          { text: "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: `confirm_save_${telegramUserId}` },
          { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: `confirm_cancel_${telegramUserId}` }
        ],
        [
          { text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data: `confirm_edit_${telegramUserId}` }
        ]
      ]
    };
    
    await bot.sendMessage(chatId, rf123ConfirmMessage, {
      reply_markup: confirmKeyboard
    });
  }
}

/**
 * Handle cancel setup button
 */
async function handleCancelSetup(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  const telegramUserId = callbackQuery.from.id;
  
  // Clear session
  userSessions.delete(telegramUserId);
  
  // Return to /mystocks menu instead of just showing cancellation message
  try {
    const stockServices = await backendApi.getStockServices(user.id);
    
    let message = `üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏*\n\n`;
    
    const keyboard = {
      inline_keyboard: []
    };
    
    // 123RF
    const rf123Status = stockServices.rf123?.enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
    message += `üî∏ *123RF*: ${rf123Status}\n\n`;
    
    if (stockServices.rf123?.enabled) {
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–≤—è–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      message += `–°–µ—Ä–≤–∏—Å 123RF –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.`;
      keyboard.inline_keyboard.push([
        { text: "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å 123RF", callback_data: "view_rf123" }
      ]);
      keyboard.inline_keyboard.push([
        { text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ 123RF", callback_data: "edit_rf123" }
      ]);
      keyboard.inline_keyboard.push([
        { text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å 123RF", callback_data: "delete_rf123" }
      ]);
    } else {
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑–∫–∏
      message += `‚ö†Ô∏è *–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å 123RF.`;
      keyboard.inline_keyboard.push([
        { text: "üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å 123RF", callback_data: "setup_123rf" }
      ]);
    }

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in handleCancelSetup:', error.message);
    await bot.sendMessage(chatId, '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  }
}

/**
 * Handle add stock service menu
 */
async function handleAddStockService(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  
  try {
    const stockServices = await backendApi.getStockServices(user.id);
    
    const services = [
      { key: 'adobeStock', name: 'Adobe Stock', setupData: 'setup_adobeStock' },
      { key: 'freepik', name: 'Freepik', setupData: 'setup_freepik' },
      { key: 'pixta', name: 'Pixta', setupData: 'setup_pixta' },
      { key: 'rf123', name: '123RF', setupData: 'setup_123rf' }
    ];
    
    const keyboard = { inline_keyboard: [] };
    let message = `üîó *–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n`;
    
    let hasUnconnected = false;
    services.forEach(service => {
      const isEnabled = stockServices[service.key]?.enabled;
      if (!isEnabled) {
        hasUnconnected = true;
        keyboard.inline_keyboard.push([
          { text: `üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å ${service.name}`, callback_data: service.setupData }
        ]);
      }
    });
    
    if (!hasUnconnected) {
      message = `‚úÖ *–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã*\n\n–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–∫–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.`;
    }
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in handleAddStockService:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤.');
  }
}

/**
 * Handle view stock menu
 */
async function handleViewStockMenu(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  
  try {
    const stockServices = await backendApi.getStockServices(user.id);
    
    const services = [
      { key: 'adobeStock', name: 'Adobe Stock', viewData: 'view_adobeStock' },
      { key: 'freepik', name: 'Freepik', viewData: 'view_freepik' },
      { key: 'pixta', name: 'Pixta', viewData: 'view_pixta' },
      { key: 'rf123', name: '123RF', viewData: 'view_rf123' }
    ];
    
    const keyboard = { inline_keyboard: [] };
    let message = `üëÅÔ∏è *–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n`;
    
    let hasConnected = false;
    services.forEach(service => {
      const isEnabled = stockServices[service.key]?.enabled;
      if (isEnabled) {
        hasConnected = true;
        keyboard.inline_keyboard.push([
          { text: `üëÅÔ∏è ${service.name}`, callback_data: service.viewData }
        ]);
      }
    });
    
    if (!hasConnected) {
      message = `‚ùå *–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.`;
    }
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in handleViewStockMenu:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤.');
  }
}

/**
 * Handle edit stock menu
 */
async function handleEditStockMenu(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  
  try {
    const stockServices = await backendApi.getStockServices(user.id);
    
    const services = [
      { key: 'adobeStock', name: 'Adobe Stock', editData: 'edit_adobeStock' },
      { key: 'freepik', name: 'Freepik', editData: 'edit_freepik' },
      { key: 'pixta', name: 'Pixta', editData: 'edit_pixta' },
      { key: 'rf123', name: '123RF', editData: 'edit_rf123' }
    ];
    
    const keyboard = { inline_keyboard: [] };
    let message = `‚úèÔ∏è *–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n`;
    
    let hasConnected = false;
    services.forEach(service => {
      const isEnabled = stockServices[service.key]?.enabled;
      if (isEnabled) {
        hasConnected = true;
        keyboard.inline_keyboard.push([
          { text: `‚úèÔ∏è ${service.name}`, callback_data: service.editData }
        ]);
      }
    });
    
    if (!hasConnected) {
      message = `‚ùå *–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.`;
    }
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in handleEditStockMenu:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤.');
  }
}

/**
 * Handle delete stock menu
 */
async function handleDeleteStockMenu(callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;
  
  try {
    const stockServices = await backendApi.getStockServices(user.id);
    
    const services = [
      { key: 'adobeStock', name: 'Adobe Stock', deleteData: 'delete_adobeStock' },
      { key: 'freepik', name: 'Freepik', deleteData: 'delete_freepik' },
      { key: 'pixta', name: 'Pixta', deleteData: 'delete_pixta' },
      { key: 'rf123', name: '123RF', deleteData: 'delete_rf123' }
    ];
    
    const keyboard = { inline_keyboard: [] };
    let message = `üóëÔ∏è *–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n`;
    
    let hasConnected = false;
    services.forEach(service => {
      const isEnabled = stockServices[service.key]?.enabled;
      if (isEnabled) {
        hasConnected = true;
        keyboard.inline_keyboard.push([
          { text: `üóëÔ∏è ${service.name}`, callback_data: service.deleteData }
        ]);
      }
    });
    
    if (!hasConnected) {
      message = `‚ùå *–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å.`;
    }
    
    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('Error in handleDeleteStockMenu:', error.message);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤.');
  }
}


// Log when bot is started
console.log('ü§ñ Telegram Bot (Backend Integration) is running...');

// Handle errors
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('Bot is shutting down...');
  bot.close();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('Bot is shutting down...');
  bot.close();
  process.exit(0);
});
