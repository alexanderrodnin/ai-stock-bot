/**
 * Test script for backend integration
 * Tests the BackendApiService functionality
 */

require('dotenv').config();
const BackendApiService = require('./services/backendApiService');

// Initialize backend API service
const backendApi = new BackendApiService({
  baseURL: process.env.BACKEND_API_URL || 'http://localhost:3000/api',
  timeout: parseInt(process.env.BACKEND_API_TIMEOUT) || 30000
});

async function runTests() {
  console.log('🧪 Testing Backend Integration...\n');

  try {
    // Test 1: Health Check
    console.log('1. Testing health check...');
    const health = await backendApi.healthCheck();
    console.log('✅ Health check passed:', health.status);
    console.log('   Backend version:', health.version);
    console.log('   Environment:', health.environment);
    console.log();

    // Test 2: Create Test User
    console.log('2. Testing user creation...');
    const testUser = {
      externalId: `test_telegram_${Date.now()}`,
      externalSystem: 'telegram',
      profile: {
        username: 'test_user',
        firstName: 'Test',
        lastName: 'User',
        language: 'en'
      },
      metadata: {
        source: 'integration_test',
        version: '2.0'
      }
    };

    const user = await backendApi.createOrGetUser(testUser);
    console.log('✅ User created successfully');
    console.log('   User ID:', user.id);
    console.log('   External ID:', user.externalId);
    console.log('   Full Name:', user.profile.fullName);
    console.log();

    // Test 3: Check Stock Services
    console.log('3. Testing stock services check...');
    const hasActiveStocks = await backendApi.hasActiveStockServices(user.id);
    console.log('✅ Stock services check completed');
    console.log('   Has active stocks:', hasActiveStocks);
    
    const stockServices = await backendApi.getStockServices(user.id);
    console.log('   Available services:', Object.keys(stockServices));
    console.log();

    // Test 4: Update Stock Service (123RF)
    console.log('4. Testing stock service update...');
    const stockUpdate = await backendApi.updateStockService(user.id, '123rf', {
      enabled: true,
      credentials: {
        username: 'test_user',
        password: 'test_password',
        ftpHost: 'ftp.123rf.com',
        ftpPort: 21,
        remotePath: '/ai_image'
      },
      settings: {
        autoUpload: false,
        defaultKeywords: ['test', 'ai', 'generated'],
        defaultDescription: 'Test AI generated image',
        pricing: 'standard'
      }
    });
    console.log('✅ Stock service updated successfully');
    console.log('   Service:', stockUpdate.service);
    console.log('   Enabled:', stockUpdate.enabled);
    console.log();

    // Test 5: Check Active Stocks Again
    console.log('5. Re-checking active stock services...');
    const hasActiveStocksAfter = await backendApi.hasActiveStockServices(user.id);
    console.log('✅ Stock services re-check completed');
    console.log('   Has active stocks now:', hasActiveStocksAfter);
    console.log();

    // Test 6: Generate Image
    console.log('6. Testing image generation...');
    const imageData = await backendApi.generateImage({
      userId: user.id,
      userExternalId: user.externalId,
      prompt: 'A simple test image of a red apple on white background',
      options: {
        model: 'dall-e-3',
        size: '1024x1024',
        quality: 'standard',
        style: 'vivid'
      }
    });
    console.log('✅ Image generated successfully');
    console.log('   Image ID:', imageData.id);
    console.log('   Model used:', imageData.model);
    console.log('   Size:', imageData.size);
    console.log('   Prompt:', imageData.prompt);
    console.log();

    // Test 7: Get Image Details
    console.log('7. Testing image retrieval...');
    const imageDetails = await backendApi.getImageById(imageData.id, user.id);
    console.log('✅ Image details retrieved');
    console.log('   Image ID:', imageDetails.id);
    console.log('   Created at:', imageDetails.createdAt);
    console.log('   Uploads count:', imageDetails.uploads?.length || 0);
    console.log();

    // Test 8: Upload to Stock (123RF)
    console.log('8. Testing stock upload...');
    try {
      const uploadResult = await backendApi.uploadToStock({
        userId: user.id,
        imageId: imageData.id,
        service: '123rf',
        title: 'Test AI Generated Apple',
        description: 'A simple test image of a red apple generated by AI',
        keywords: ['apple', 'fruit', 'red', 'ai', 'generated', 'test'],
        category: 'Food',
        pricing: 'standard'
      });
      console.log('✅ Stock upload completed');
      console.log('   Success:', uploadResult.success);
      console.log('   Service:', uploadResult.service);
      if (uploadResult.externalId) {
        console.log('   External ID:', uploadResult.externalId);
      }
    } catch (uploadError) {
      console.log('⚠️ Stock upload failed (expected if FTP credentials are test data)');
      console.log('   Error:', uploadError.message);
    }
    console.log();

    // Test 9: Get User Images
    console.log('9. Testing user images retrieval...');
    const userImages = await backendApi.getUserImages(user.id, { limit: 5 });
    console.log('✅ User images retrieved');
    console.log('   Total images:', userImages.pagination.total);
    console.log('   Images in response:', userImages.images.length);
    console.log();

    // Test 10: Get User Stats
    console.log('10. Testing user statistics...');
    const userStats = await backendApi.getUserStats(user.id);
    console.log('✅ User statistics retrieved');
    console.log('   Images generated:', userStats.imagesGenerated);
    console.log('   Images uploaded:', userStats.imagesUploaded);
    console.log('   Total requests:', userStats.totalRequests);
    console.log('   Subscription plan:', userStats.subscription?.plan);
    console.log();

    // Cleanup: Delete test user
    console.log('11. Cleaning up test data...');
    try {
      // Note: We need to implement delete user endpoint call
      console.log('⚠️ Manual cleanup required - delete user:', user.id);
    } catch (cleanupError) {
      console.log('⚠️ Cleanup failed:', cleanupError.message);
    }
    console.log();

    console.log('🎉 All tests completed successfully!');
    console.log('\n📋 Summary:');
    console.log('✅ Backend API connection working');
    console.log('✅ User management working');
    console.log('✅ Stock services management working');
    console.log('✅ Image generation working');
    console.log('✅ Image retrieval working');
    console.log('✅ Stock upload working (with valid credentials)');
    console.log('✅ Statistics working');
    console.log('\n🚀 Telegram bot is ready for backend integration!');

  } catch (error) {
    console.error('❌ Test failed:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Check if backend URL is provided
if (!process.env.BACKEND_API_URL && !process.argv.includes('--default')) {
  console.log('⚠️ BACKEND_API_URL not set in .env file');
  console.log('Using default: http://localhost:3000/api');
  console.log('Make sure backend server is running on port 3000');
  console.log('Or set BACKEND_API_URL in your .env file');
  console.log('Add --default flag to skip this warning');
  console.log();
}

// Run tests
runTests().catch(error => {
  console.error('❌ Test suite failed:', error.message);
  process.exit(1);
});
