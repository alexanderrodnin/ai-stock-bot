#!/bin/bash

# Users API Integration Tests
# –¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö curl –∑–∞–ø—Ä–æ—Å–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# Note: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º set -e —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE="http://localhost:3000/api"
HEALTH_URL="http://localhost:3000/health"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
TEST_USER_ID=""
CREATED_USER_IDS=()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[PASS]${NC} $1"
    ((PASSED_TESTS++))
}

log_error() {
    echo -e "${RED}[FAIL]${NC} $1"
    ((FAILED_TESTS++))
}

log_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

test_api_call() {
    local test_name="$1"
    local method="$2"
    local url="$3"
    local data="$4"
    local expected_status="$5"
    local description="$6"
    
    ((TOTAL_TESTS++))
    
    echo
    log_info "üß™ Test ${TOTAL_TESTS}: ${test_name}"
    log_info "   ${description}"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞
    if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
        response=$(curl -s -w "\n%{http_code}" -X "$method" \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$url")
    else
        response=$(curl -s -w "\n%{http_code}" -X "$method" "$url")
    fi
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
    body=$(echo "$response" | sed '$d')
    status_code=$(echo "$response" | tail -n 1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
    if [ "$status_code" = "$expected_status" ]; then
        log_success "Status: $status_code (Expected: $expected_status)"
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if command -v jq &> /dev/null; then
            echo "$body" | jq '.' 2>/dev/null || echo "$body"
        else
            echo "$body"
        fi
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        case $test_name in
            "CREATE_TEST_USER"|"CREATE_TELEGRAM_USER")
                if echo "$body" | grep -q '"success":true'; then
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
                    if command -v jq &> /dev/null; then
                        USER_ID=$(echo "$body" | jq -r '.data.id // empty')
                        if [ "$test_name" = "CREATE_TEST_USER" ]; then
                            TEST_USER_ID="$USER_ID"
                        fi
                        CREATED_USER_IDS+=("$USER_ID")
                        log_info "   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω User ID: $USER_ID"
                    fi
                fi
                ;;
        esac
        
    else
        log_error "Status: $status_code (Expected: $expected_status)"
        echo "$body"
    fi
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API
wait_for_api() {
    log_info "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API..."
    
    for i in {1..30}; do
        if curl -s "$HEALTH_URL" > /dev/null 2>&1; then
            echo -e "${GREEN}[PASS]${NC} API –≥–æ—Ç–æ–≤!"
            return 0
        fi
        log_info "   –ü–æ–ø—ã—Ç–∫–∞ $i/30 - API –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ..."
        sleep 2
    done
    
    echo -e "${RED}[FAIL]${NC} API –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ë–î –æ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cleanup_test_users() {
    log_info "üßΩ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'all')
    response=$(curl -s "$API_BASE/users?status=all")
    
    # –ï—Å–ª–∏ jq –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–π–¥–µ–º –∏ —É–¥–∞–ª–∏–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if command -v jq &> /dev/null; then
        # –ò–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ external ID
        test_user_ids=$(echo "$response" | jq -r '.data.users[]? | select(.externalId | test("^(test_user_|tg_)")) | .id' 2>/dev/null)
        
        if [ -n "$test_user_ids" ]; then
            echo "$test_user_ids" | while read -r user_id; do
                if [ -n "$user_id" ]; then
                    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—Ç–∏–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
                    curl -s -X DELETE "$API_BASE/users/$user_id" > /dev/null 2>&1
                    # –ó–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π MongoDB –∑–∞–ø—Ä–æ—Å
                    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π
                    log_info "   –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π: $user_id"
                fi
            done
        else
            log_info "   –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    # –µ—Å–ª–∏ mongosh –¥–æ—Å—Ç—É–ø–µ–Ω
    if command -v mongosh &> /dev/null; then
        log_info "   –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
        mongosh mongodb://admin:password123@localhost:27017/ai-stock-bot?authSource=admin \
            --eval 'db.users.deleteMany({externalId: {$regex: /^(test_user_|tg_)/}})' \
            > /dev/null 2>&1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
cleanup() {
    echo
    log_info "üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in "${CREATED_USER_IDS[@]}"; do
        if [ -n "$user_id" ]; then
            curl -s -X DELETE "$API_BASE/users/$user_id" > /dev/null 2>&1
            log_info "   –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $user_id"
        fi
    done
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
echo "========================================"
echo "üöÄ AI Stock Bot - Users API Integration Tests"
echo "========================================"

# –û–∂–∏–¥–∞–Ω–∏–µ API
wait_for_api

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cleanup_test_users

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
test_api_call "HEALTH_CHECK" "GET" "$HEALTH_URL" "" "200" \
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∑–¥–æ—Ä–æ–≤—å—è API"

# –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API
test_api_call "API_INFO" "GET" "$API_BASE/" "" "200" \
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ endpoint API"

# –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
test_api_call "GET_ALL_USERS" "GET" "$API_BASE/users" "" "200" \
    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π timestamp –∏ random –¥–ª—è —Ç–µ—Å—Ç–æ–≤
TIMESTAMP=$(date +%s)
RANDOM_ID=$(openssl rand -hex 4 2>/dev/null || echo "rand$(date +%N | cut -c1-8)")
UNIQUE_SUFFIX="${TIMESTAMP}_${RANDOM_ID}"

# –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
test_api_call "CREATE_TEST_USER" "POST" "$API_BASE/users" \
"{
  \"externalId\": \"test_user_${TIMESTAMP}\",
  \"externalSystem\": \"api\",
  \"username\": \"john_doe_test_${TIMESTAMP}\",
  \"firstName\": \"John\",
  \"lastName\": \"Doe\",
  \"email\": \"john.test.${TIMESTAMP}@example.com\",
  \"preferences\": {
    \"image\": {
      \"defaultModel\": \"dall-e-3\",
      \"defaultSize\": \"1024x1024\"
    }
  },
  \"metadata\": {
    \"source\": \"integration_test\",
    \"version\": \"1.0\"
  }
}" "201" "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º"

sleep 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limiting

# –î–∞—Ç—å –≤—Ä–µ–º—è API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
sleep 1

# –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ MongoDB ID
if [ -n "$TEST_USER_ID" ]; then
    test_api_call "GET_USER_BY_ID" "GET" "$API_BASE/users/$TEST_USER_ID" "" "200" \
        "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ MongoDB ID"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ GET_USER_BY_ID - –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

# –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω–µ—à–Ω–µ–º—É ID
test_api_call "GET_USER_BY_EXTERNAL_ID" "GET" "$API_BASE/users/external/api/test_user_${TIMESTAMP}" "" "200" \
    "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω–µ—à–Ω–µ–º—É ID (api —Å–∏—Å—Ç–µ–º–∞)"

sleep 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limiting

# –¢–µ—Å—Ç 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [ -n "$TEST_USER_ID" ]; then
    test_api_call "UPDATE_USER" "PUT" "$API_BASE/users/$TEST_USER_ID" \
'{
  "firstName": "John Updated",
  "email": "john.updated@example.com",
  "preferences": {
    "image": {
      "defaultModel": "dall-e-2",
      "defaultQuality": "hd"
    }
  }
}' "200" "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ UPDATE_USER - –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

# –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [ -n "$TEST_USER_ID" ]; then
    test_api_call "GET_USER_STATS" "GET" "$API_BASE/users/$TEST_USER_ID/stats" "" "200" \
        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ GET_USER_STATS - –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

# –¢–µ—Å—Ç 9: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
test_api_call "CREATE_DUPLICATE_USER" "POST" "$API_BASE/users" \
"{
  \"externalId\": \"test_user_${TIMESTAMP}\",
  \"externalSystem\": \"api\",
  \"username\": \"duplicate_user\"
}" "409" "–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)"

sleep 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limiting

# –¢–µ—Å—Ç 10: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
test_api_call "GET_NONEXISTENT_USER" "GET" "$API_BASE/users/external/api/nonexistent_user" "" "404" \
    "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)"

# –¢–µ—Å—Ç 11: –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
test_api_call "CREATE_TELEGRAM_USER" "POST" "$API_BASE/users" \
"{
  \"externalId\": \"tg_${UNIQUE_SUFFIX}\",
  \"externalSystem\": \"telegram\",
  \"username\": \"telegram_test_user_${UNIQUE_SUFFIX}\",
  \"firstName\": \"Alice\",
  \"lastName\": \"Smith\"
}" "201" "–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"

# –¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
test_api_call "CREATE_INVALID_USER" "POST" "$API_BASE/users" \
'{
  "externalSystem": "invalid_system",
  "username": "test"
}' "400" "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)"

# –¢–µ—Å—Ç 13: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ MongoDB ID —Ñ–æ—Ä–º–∞—Ç–∞
test_api_call "INVALID_ID_FORMAT" "GET" "$API_BASE/users/invalid-id-format" "" "400" \
    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ MongoDB ID (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)"

# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
echo
echo "========================================"
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"
echo "========================================"
echo -e "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${BLUE}$TOTAL_TESTS${NC}"
echo -e "–ü—Ä–æ–π–¥–µ–Ω–æ:     ${GREEN}$PASSED_TESTS${NC}"
echo -e "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:    ${RED}$FAILED_TESTS${NC}"

# –û—á–∏—Å—Ç–∫–∞
cleanup

if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "\nüéâ ${GREEN}–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
    exit 0
else
    echo -e "\n‚ùå ${RED}–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.${NC}"
    exit 1
fi
