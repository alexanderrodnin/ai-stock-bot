#!/bin/bash

# Stock Upload Integration Tests
# –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 123RF ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å—Ç–æ–∫–∏

# Note: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º set -e —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE="http://localhost:3000/api"
HEALTH_URL="http://localhost:3000/health"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
TEST_USER_ID=""
GENERATED_IMAGE_ID=""
CREATED_USER_IDS=()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f ".env" ]; then
    export $(grep -v '^#' .env | xargs)
fi

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[PASS]${NC} $1"
    ((PASSED_TESTS++))
}

log_error() {
    echo -e "${RED}[FAIL]${NC} $1"
    ((FAILED_TESTS++))
}

log_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

test_api_call() {
    local test_name="$1"
    local method="$2"
    local url="$3"
    local data="$4"
    local expected_status="$5"
    local description="$6"
    
    ((TOTAL_TESTS++))
    
    echo
    log_info "üß™ Test ${TOTAL_TESTS}: ${test_name}"
    log_info "   ${description}"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞
    if [ "$method" = "POST" ] || [ "$method" = "PUT" ]; then
        response=$(curl -s -w "\n%{http_code}" -X "$method" \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$url")
    else
        response=$(curl -s -w "\n%{http_code}" -X "$method" "$url")
    fi
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
    body=$(echo "$response" | sed '$d')
    status_code=$(echo "$response" | tail -n 1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
    if [ "$status_code" = "$expected_status" ]; then
        log_success "Status: $status_code (Expected: $expected_status)"
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if command -v jq &> /dev/null; then
            echo "$body" | jq '.' 2>/dev/null || echo "$body"
        else
            echo "$body"
        fi
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        case $test_name in
            "CREATE_STOCK_USER")
                if echo "$body" | grep -q '"success":true'; then
                    if command -v jq &> /dev/null; then
                        USER_ID=$(echo "$body" | jq -r '.data._id // .data.id // empty')
                        log_info "   üîç –û—Ç–ª–∞–¥–∫–∞: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π USER_ID = '$USER_ID'"
                        if [ "$USER_ID" != "null" ] && [ "$USER_ID" != "empty" ] && [ -n "$USER_ID" ]; then
                            TEST_USER_ID="$USER_ID"
                            CREATED_USER_IDS+=("$USER_ID")
                            log_info "   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω User ID: $USER_ID"
                        else
                            log_error "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å User ID –∏–∑ –æ—Ç–≤–µ—Ç–∞"
                            echo "$body" | jq '.data' 2>/dev/null || echo "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"
                        fi
                    else
                        # –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ jq - –∏—â–µ–º "_id":"–∑–Ω–∞—á–µ–Ω–∏–µ"
                        USER_ID=$(echo "$body" | grep -o '"_id":"[^"]*"' | sed 's/"_id":"\([^"]*\)"/\1/')
                        if [ -z "$USER_ID" ]; then
                            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ "id":"–∑–Ω–∞—á–µ–Ω–∏–µ"
                            USER_ID=$(echo "$body" | grep -o '"id":"[^"]*"' | sed 's/"id":"\([^"]*\)"/\1/')
                        fi
                        log_info "   üîç –û—Ç–ª–∞–¥–∫–∞: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π USER_ID = '$USER_ID'"
                        if [ -n "$USER_ID" ]; then
                            TEST_USER_ID="$USER_ID"
                            CREATED_USER_IDS+=("$USER_ID")
                            log_info "   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω User ID: $USER_ID"
                        else
                            log_error "   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å User ID –∏–∑ –æ—Ç–≤–µ—Ç–∞"
                        fi
                    fi
                fi
                ;;
            "GENERATE_IMAGE")
                if echo "$body" | grep -q '"success":true'; then
                    if command -v jq &> /dev/null; then
                        IMAGE_ID=$(echo "$body" | jq -r '.data.id // empty')
                    else
                        # –ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ jq
                        IMAGE_ID=$(echo "$body" | grep -o '"id":"[^"]*"' | sed 's/"id":"\([^"]*\)"/\1/')
                    fi
                    if [ -n "$IMAGE_ID" ]; then
                        GENERATED_IMAGE_ID="$IMAGE_ID"
                        log_info "   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω Image ID: $IMAGE_ID"
                    fi
                fi
                ;;
        esac
        
    else
        log_error "Status: $status_code (Expected: $expected_status)"
        echo "$body"
    fi
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API
wait_for_api() {
    log_info "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API..."
    
    for i in {1..30}; do
        if curl -s "$HEALTH_URL" > /dev/null 2>&1; then
            echo -e "${GREEN}[PASS]${NC} API –≥–æ—Ç–æ–≤!"
            return 0
        fi
        log_info "   –ü–æ–ø—ã—Ç–∫–∞ $i/30 - API –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ..."
        sleep 2
    done
    
    echo -e "${RED}[FAIL]${NC} API –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
cleanup() {
    echo
    log_info "üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in "${CREATED_USER_IDS[@]}"; do
        if [ -n "$user_id" ]; then
            curl -s -X DELETE "$API_BASE/users/$user_id" > /dev/null 2>&1
            log_info "   –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $user_id"
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env_vars() {
    log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è 123RF..."
    
    if [ -z "$FTP_HOST" ] || [ -z "$FTP_USER" ] || [ -z "$FTP_PASSWORD" ] || [ -z "$FTP_REMOTE_PATH" ]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
        log_error "FTP_HOST: ${FTP_HOST:-'–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}"
        log_error "FTP_USER: ${FTP_USER:-'–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}"
        log_error "FTP_PASSWORD: ${FTP_PASSWORD:+'–£–°–¢–ê–ù–û–í–õ–ï–ù'}"
        log_error "FTP_REMOTE_PATH: ${FTP_REMOTE_PATH:-'–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}"
        exit 1
    fi
    
    echo -e "${GREEN}[PASS]${NC} –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:"
    log_info "   FTP_HOST: $FTP_HOST"
    log_info "   FTP_USER: $FTP_USER"
    log_info "   FTP_REMOTE_PATH: $FTP_REMOTE_PATH"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
echo "========================================"
echo "üöÄ AI Stock Bot - Stock Upload Integration Tests"
echo "========================================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env_vars

# –û–∂–∏–¥–∞–Ω–∏–µ API
wait_for_api

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π timestamp –¥–ª—è —Ç–µ—Å—Ç–æ–≤
TIMESTAMP=$(date +%s)
RANDOM_ID=$(openssl rand -hex 4 2>/dev/null || echo "rand$(date +%N | cut -c1-8)")

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
test_api_call "HEALTH_CHECK" "GET" "$HEALTH_URL" "" "200" \
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∑–¥–æ—Ä–æ–≤—å—è API"

# –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∫–æ–≤
test_api_call "CREATE_STOCK_USER" "POST" "$API_BASE/users" \
"{
  \"externalId\": \"stock_test_user_${TIMESTAMP}\",
  \"externalSystem\": \"api\",
  \"username\": \"stock_tester_${TIMESTAMP}\",
  \"firstName\": \"Stock\",
  \"lastName\": \"Tester\",
  \"email\": \"stock.test.${TIMESTAMP}@example.com\",
  \"preferences\": {
    \"image\": {
      \"defaultModel\": \"dall-e-3\",
      \"defaultSize\": \"1024x1024\",
      \"defaultQuality\": \"standard\",
      \"defaultStyle\": \"vivid\"
    }
  },
  \"metadata\": {
    \"source\": \"stock_integration_test\",
    \"version\": \"1.0\"
  }
}" "201" "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∫–æ–≤"

sleep 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –¢–µ—Å—Ç 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 123RF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª—å)
if [ -n "$TEST_USER_ID" ]; then
    test_api_call "SETUP_123RF_CONFIG" "PUT" "$API_BASE/users/$TEST_USER_ID/stock-services/123rf" \
"{
  \"enabled\": true,
  \"credentials\": {
    \"username\": \"$FTP_USER\",
    \"password\": \"$FTP_PASSWORD\",
    \"ftpHost\": \"$FTP_HOST\",
    \"ftpPort\": 21,
    \"remotePath\": \"$FTP_REMOTE_PATH\"
  },
  \"settings\": {
    \"autoUpload\": false,
    \"defaultKeywords\": [\"ai\", \"generated\", \"digital\", \"art\"],
    \"defaultDescription\": \"AI generated digital artwork\",
    \"pricing\": \"standard\"
  }
}" "200" "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 123RF –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 123RF - –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

sleep 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
if [ -n "$TEST_USER_ID" ]; then
    test_api_call "GENERATE_IMAGE" "POST" "$API_BASE/images/generate" \
"{
  \"userId\": \"$TEST_USER_ID\",
  \"userExternalId\": \"stock_test_user_${TIMESTAMP}\",
  \"prompt\": \"A beautiful digital artwork of a serene mountain landscape with crystal clear lake reflection\",
  \"options\": {
    \"model\": \"dall-e-3\",
    \"size\": \"1024x1024\",
    \"quality\": \"standard\",
    \"style\": \"vivid\"
  }
}" "201" "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å—Ç–æ–∫–∏"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

sleep 5  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
if [ -n "$GENERATED_IMAGE_ID" ] && [ -n "$TEST_USER_ID" ]; then
    test_api_call "CHECK_GENERATED_IMAGE" "GET" "$API_BASE/images/$GENERATED_IMAGE_ID?userId=$TEST_USER_ID" "" "200" \
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –Ω–µ—Ç ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

sleep 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –¢–µ—Å—Ç 6: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ 123RF
if [ -n "$GENERATED_IMAGE_ID" ] && [ -n "$TEST_USER_ID" ]; then
    test_api_call "UPLOAD_TO_123RF" "POST" "$API_BASE/upload/123rf" \
"{
  \"userId\": \"$TEST_USER_ID\",
  \"imageId\": \"$GENERATED_IMAGE_ID\",
  \"title\": \"Beautiful Mountain Landscape Digital Art\",
  \"description\": \"A stunning AI-generated digital artwork featuring a serene mountain landscape with crystal clear lake reflection. Perfect for nature and landscape themed projects.\",
  \"keywords\": [\"mountain\", \"landscape\", \"nature\", \"digital\", \"art\", \"ai\", \"generated\", \"serene\", \"lake\", \"reflection\"],
  \"category\": \"Nature\",
  \"pricing\": \"standard\"
}" "200" "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ 123RF"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ 123RF - –Ω–µ—Ç ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

sleep 3  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏

# –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
if [ -n "$GENERATED_IMAGE_ID" ] && [ -n "$TEST_USER_ID" ]; then
    test_api_call "CHECK_UPLOAD_STATUS" "GET" "$API_BASE/upload/status/$GENERATED_IMAGE_ID?userId=$TEST_USER_ID" "" "200" \
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ 123RF"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –Ω–µ—Ç ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

# –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [ -n "$TEST_USER_ID" ]; then
    test_api_call "GET_USER_IMAGES" "GET" "$API_BASE/images/user/$TEST_USER_ID" "" "200" \
        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

# –¢–µ—Å—Ç 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 123RF
if [ -n "$TEST_USER_ID" ]; then
    test_api_call "TEST_123RF_CONNECTION" "POST" "$API_BASE/users/$TEST_USER_ID/stock-services/123rf/test" "" "200" \
        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 123RF"
else
    log_warning "–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
fi

# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
echo
echo "========================================"
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"
echo "========================================"
echo -e "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${BLUE}$TOTAL_TESTS${NC}"
echo -e "–ü—Ä–æ–π–¥–µ–Ω–æ:     ${GREEN}$PASSED_TESTS${NC}"
echo -e "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ:    ${RED}$FAILED_TESTS${NC}"

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if [ -n "$TEST_USER_ID" ]; then
    echo -e "\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
    echo -e "User ID: ${BLUE}$TEST_USER_ID${NC}"
    if [ -n "$GENERATED_IMAGE_ID" ]; then
        echo -e "Image ID: ${BLUE}$GENERATED_IMAGE_ID${NC}"
    fi
fi

# –û—á–∏—Å—Ç–∫–∞
cleanup

if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "\nüéâ ${GREEN}–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo -e "‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–æ–∫–∞–º–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω:"
    echo -e "   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo -e "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 123RF"
    echo -e "   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    echo -e "   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å—Ç–æ–∫–∏"
    exit 0
else
    echo -e "\n‚ùå ${RED}–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å.${NC}"
    exit 1
fi
