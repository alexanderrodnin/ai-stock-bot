version: '3.8'

services:
  # MongoDB Database Service
  mongodb:
    image: mongo:7.0.5
    container_name: ai-stock-bot-mongodb-prod
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      # Persist MongoDB data using named volume for production
      - mongodb_data_prod:/data/db
      # Custom initialization scripts
      - ./backend/docker/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - ai-stock-bot-network-prod
    restart: unless-stopped
    command: mongod --bind_ip_all
    labels:
      - "com.centurylinklabs.watchtower.enable=false"  # Don't update MongoDB

  # Backend API Service (Production)
  backend:
    image: alexanderrodnin/ai-stock-bot-backend:backend
    container_name: ai-stock-bot-backend-prod
    ports:
      - "${PORT}:${PORT}"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGO_INITDB_DATABASE}?authSource=admin
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - PORT=${PORT}
    depends_on:
      - mongodb
    networks:
      - ai-stock-bot-network-prod
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=ai-stock-bot"

  # Telegram Bot Service (Production)
  tg-bot:
    image: alexanderrodnin/ai-stock-bot-tg-bot:backend
    container_name: ai-stock-bot-telegram-prod
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - BACKEND_API_URL=http://backend:${PORT}/api
      - BACKEND_API_TIMEOUT=${BACKEND_API_TIMEOUT}
      - DEMO_MODE=${DEMO_MODE}
    depends_on:
      - backend
    networks:
      - ai-stock-bot-network-prod
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=ai-stock-bot"

  # MongoDB Express (Web UI for MongoDB)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: ai-stock-bot-mongo-express-prod
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
    depends_on:
      - mongodb
    networks:
      - ai-stock-bot-network-prod
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=false"  # Don't update MongoDB Express

  # Watchtower - Automatic Docker Image Updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: ai-stock-bot-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_POLL_INTERVAL=30  # Check every 30 seconds
      - WATCHTOWER_CLEANUP=true      # Remove old images after update
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_SCOPE=ai-stock-bot
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL:-}  # Optional: webhook for notifications
      - WATCHTOWER_DEBUG=true
      - WATCHTOWER_LOG_LEVEL=info
    networks:
      - ai-stock-bot-network-prod
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.scope=ai-stock-bot"
      - "com.centurylinklabs.watchtower.enable=false"  # Don't update watchtower itself

# Named volumes for production data persistence
volumes:
  mongodb_data_prod:
    driver: local
    name: ai-stock-bot-mongodb-data-prod

# Custom network for service communication
networks:
  ai-stock-bot-network-prod:
    driver: bridge
    name: ai-stock-bot-network-prod
