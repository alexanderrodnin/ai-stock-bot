@startuml AI Stock Bot - Database Structure
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title AI Stock Bot - Database Structure (MongoDB Collections)

LAYOUT_WITH_LEGEND()

' Main Database Container
Container_Boundary(mongodb, "MongoDB Database") {
    
    ' Users Collection - Central entity
    Container(users, "Users Collection", "MongoDB Collection", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç–æ–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
    
    ' Payments Collection
    Container(payments, "Payments Collection", "MongoDB Collection", "–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π YooMoney, —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    ' Images Collection
    Container(images, "Images Collection", "MongoDB Collection", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ AI –º–æ–¥–µ–ª–µ–π –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
    
    ' AppConfig Collection
    Container(appconfig, "AppConfig Collection", "MongoDB Collection", "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    ' ConfigAuditLog Collection
    Container(auditlog, "ConfigAuditLog Collection", "MongoDB Collection", "–ê—É–¥–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
    
    ' WebhookLog Collection
    Container(webhooklog, "WebhookLog Collection", "MongoDB Collection", "–õ–æ–≥–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç YooMoney —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–µ–π")
}

' External Systems
System_Ext(telegram, "Telegram Bot", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
System_Ext(backend, "Backend API", "REST API —Å–µ—Ä–≤–µ—Ä")
System_Ext(yoomoney, "YooMoney", "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
System_Ext(ai_providers, "AI Providers", "OpenAI, Segmind")
System_Ext(stock_services, "Stock Services", "123RF, Shutterstock, Adobe Stock")

' Relationships between collections
Rel_D(users, payments, "paymentHistory[]", "ObjectId references")
Rel_D(users, images, "userId", "ObjectId reference")
Rel_D(payments, users, "userId", "ObjectId reference")
Rel_D(images, users, "userId", "ObjectId reference")
Rel_D(auditlog, appconfig, "configKey", "Configuration changes tracking")

' External system relationships
Rel(telegram, users, "Creates/Updates", "externalId + externalSystem")
Rel(backend, users, "CRUD operations", "User management")
Rel(backend, payments, "Payment processing", "YooMoney integration")
Rel(backend, images, "Image generation", "AI providers integration")
Rel(yoomoney, webhooklog, "Webhook notifications", "Payment status updates")
Rel(ai_providers, images, "Generated images", "AI model responses")
Rel(stock_services, images, "Upload status", "Stock platform integration")

' Collection Details
note right of users : **Key Fields:**\n‚Ä¢ externalId + externalSystem (unique)\n‚Ä¢ profile (username, email, language)\n‚Ä¢ stockServices (üîí encrypted credentials)\n‚Ä¢ subscription (plan, imagesRemaining)\n‚Ä¢ stats (imagesGenerated, totalRequests)\n‚Ä¢ paymentHistory[] (ObjectId refs)\n\n**Indexes:**\n‚Ä¢ {externalId: 1, externalSystem: 1}\n‚Ä¢ {'subscription.isActive': 1}\n‚Ä¢ {'stats.lastActivity': -1}

note right of payments : **Key Fields:**\n‚Ä¢ userId (ObjectId ref to Users)\n‚Ä¢ telegramId (number, indexed)\n‚Ä¢ paymentId (string, unique)\n‚Ä¢ yoomoneyOperationId\n‚Ä¢ planType (plan_10|100|1000|10000)\n‚Ä¢ status (pending|completed|failed)\n‚Ä¢ amount, currency (RUB)\n\n**Indexes:**\n‚Ä¢ {paymentId: 1} (unique)\n‚Ä¢ {telegramId: 1, status: 1}\n‚Ä¢ {status: 1, expiresAt: 1}

note left of images : **Key Fields:**\n‚Ä¢ userId (ObjectId ref to Users)\n‚Ä¢ userExternalId + userExternalSystem\n‚Ä¢ generation.model (dall-e-3|juggernaut-pro-flux|seedream-v3|hidream-i1-fast)\n‚Ä¢ generation.provider (openai|segmind)\n‚Ä¢ file (path, size, mimeType, dimensions)\n‚Ä¢ uploads[] (service, status, settings)\n‚Ä¢ metadata (title, keywords, category)\n\n**Indexes:**\n‚Ä¢ {userId: 1, createdAt: -1}\n‚Ä¢ {userExternalId: 1, userExternalSystem: 1}\n‚Ä¢ {'uploads.service': 1, 'uploads.status': 1}

note left of appconfig : **Key Fields:**\n‚Ä¢ configKey (string, unique)\n‚Ä¢ configType (system|user|feature|integration)\n‚Ä¢ isActive (boolean, indexed)\n‚Ä¢ value (Mixed - flexible schema)\n‚Ä¢ metadata.version (auto-increment)\n\n**Indexes:**\n‚Ä¢ {configKey: 1, isActive: 1}\n‚Ä¢ {configType: 1, isActive: 1}\n‚Ä¢ {updatedAt: -1}

note right of auditlog : **Key Fields:**\n‚Ä¢ configKey (tracked configuration)\n‚Ä¢ action (CREATE|UPDATE|DELETE|ACTIVATE|DEACTIVATE)\n‚Ä¢ oldValue, newValue (Mixed)\n‚Ä¢ changedBy, changedAt\n‚Ä¢ requestMetadata (IP, userAgent, endpoint)\n\n**Indexes:**\n‚Ä¢ {configKey: 1, changedAt: -1}\n‚Ä¢ {action: 1, changedAt: -1}\n‚Ä¢ {changedBy: 1, changedAt: -1}

note right of webhooklog : **Key Fields:**\n‚Ä¢ paymentId (string)\n‚Ä¢ yoomoneyOperationId\n‚Ä¢ webhookData (Mixed - YooMoney payload)\n‚Ä¢ signatureValid (boolean)\n‚Ä¢ processed (boolean)\n‚Ä¢ receivedAt, processedAt\n\n**Indexes:**\n‚Ä¢ {paymentId: 1}\n‚Ä¢ {processed: 1}\n‚Ä¢ {receivedAt: 1}

' Legend for special markings
note bottom : **Legend:**\nüîí = Encrypted fields (using AES-256)\n[] = Array fields\nObjectId = MongoDB ObjectId references\nMixed = Flexible schema (any JSON structure)

@enduml
